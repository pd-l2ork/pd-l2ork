PD-L2ORK TODO:

*Autocomplete displaying multiple instances of the same
  *Not sure how this broke. Deleting ~/.pd-l2ork/completions.json fixed the issue
  *Will leave this open to see if it recurrs

*Bezier implementation of the array sometimes:
  *does not draw when the patch is opened (with different zoom levels)
  *sometimes has the last point that you cannot change that is stuck at the top
  *when a toplevel patch it has only a subset of the points present (e.g. a large vertical bar in the middle) and you cannot edit it, although it adapts to the window size.

*Integrate cyclone
  *Need to request upstream documentation update to remove inappropriate language.

*Try to track down a sporadic bug that sometimes assumes that object text is empty and even though you only add text, the resulting text is only what you added.
  *Need to find a way to reproduce reliably.

*Updating cursor when exiting out of edit mode (stays stale until you move it)

*C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:3822 Uncaught TypeError: Cannot read properties of null (reading 'window')
    at get_item (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:3822:26)
    at img.onload (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:7288:24)
  *Need to be able to reproduce

*consistency check failed: canvas_get_snap_offset when copying instead of cutting inside sync controls password part
  *Maybe: TypeError: Cannot read properties of undefined (reading 'classList')
  *Need to be able to reproduce

*Uncaught TypeError: Cannot read properties of undefined (reading 'classList')
    at HTMLDocument.<anonymous> (pd_canvas.js:1905:43)
  *Need to be able to reproduce

*Make coll silent on deleting keys that don't exist (after merging the new version of cyclone)

*On Windows11, every time window is saved it gets a bit bigger? No, but it does seem to nudge itself one pixel to the right. TODO: get printout from the checkgeometry or similar to see what pd-l2ork thinks.

*Integrate vstplugin~
  https://git.iem.at/pd/vstplugin

*Integrate pd-ndi
  https://github.com/gogo2/pd-ndi

*Explore reports of OSX edit menu failing under certain circumstances to be reenabled.
  *Need a reproducible method.

*Update pdjs to use a more recent version of v8 (this might fix arm macbook errors, as pdjs currently does not work properly on apple silicon).

*unit-circle (or any other data structure in Pd-L2Ork data structure demos) does not work with GOP enabled.
  *This is actually not true. GOP setting has to be adjusted. That said, however, adjustment is really confusing if one mixes data structure with regular objects. Should we simply disable GOP on such mixed canvases?
  *A derrivative bug is that when one resizes a GOP window with the data structure being visible (e.g. enable GOP and then set at the bottom values for bottom and right as 1000 and 900, so that unit-circle is visible), then resize the GOP frame. The data structure gets redrawn without being erased, becoming increasingly darker.
    *This has been fixed. Needs to be further tested.

*opacity.pd (Pd-L2Ork data structures) makes pasting impossible once the patch has been animated.
  *pd_canvas.html: TypeError: Cannot read properties of undefined (reading 'classList')
    *This has been fixed. Needs to be further tested.
  *Occasional classList error in pd_canvas.html when cuting then pasting (need to track this one down--may be the same as the one above).
    *This has been fixed. Needs to be further tested.

*Investigate potential issue with preset_nodes and/or patch connections getting all confused after the patch has been edited afterwards (even though patch cords are visually correctly connected, objects, like the one in Sync-Control.pd inside Tweeter, and more specifically length toggle, are not forwarding data like they should).
  *Explore if "select all" also selects invisible preset_hub k12, which could explain how two of them found their way into sync-control patch (select all, cut, paste into a new patch that already has it).
    *No, this should not be a problem since glist_select filters selection of the preset_hub.
  *This may be because sync-controls at one point had two invisible preset_hubs that was causing all kinds of stability problems.

*Investigate increase in crashes when manipulating ggee/image and working with Tweeter 0.78.
  *Could it have been the Sync-Controls.pd having erroneously 2 invisible k12 preset_hubs? No idea how this happened.
    *Looks like this has vastly improved the stability. However, opening and closing L2OrkTweet patch still crashes sometimes.
      *This is a long-standing unrelated bug given the patch complexity.

*On Linux (possibly other places), moving dialog popup to fit within the desktop, if called on the second screen, still opens dialog on the first screen.
  *Consider porting the whole front-end to electron instead (SIGH...).

*Touch interface is greatly limited in edit mode. Handles are too small and behavior inconsistent. iemgui label needs to be tapped, then moved (at least we now take the entire handle to treat it as xy movable). cnv has a very narrow and invisible area for selection. GOP frame is probably also too narrow for per-axis dragging. Changing width of a text object does not work consistently, likely due to redrawing of the object (unlike iemguis that update their properties without redrawing). Editmode and right-click menu are inaccessible. etc.
  *Moving forward we are treating touch interface primarily as a runtime mode means of interaction. That said, accessing right-click menu and editmode menus by tapping and holding should be doable, which should provide minimal usability in a touch-only environment.
    *There is still a question of being able to show keyboard, which could be an icon or a menu option...

*doc/manuals/2.image: looks like on Windows lighting does not work always and destroying window in one of the early examples does not work. This is obsolete documentation that should be ignored. Should we remove this altogether?
  *These need to be revamped by possibly using different gemhead object/abstraction. Looks like replacing gemhead with pd_gemhead may fix this, but there is more to clean up than just that...

*Explore what limits the hex color interpretation to also include alpha channel and support for it. Straightforward CSS works, so this is likely a backend limitation.

*Investigate ggee/image redraw of the entire canvas.
  *This is due to undo_cut redrawing canvas to reposition all objects where they belong. Added TODO inside g_editor.c where repositioning inside DOM should take place.
    *Need to figure out logic how to do this reliably. Probably by referencing the tag of the object right below it (or above it, whichever is easier) and placing it there.
      *How to deal with selection of multiple objects, however?
        *Perhaps this should be tackled during pasting action (per object, if possible), not after the fact?
          *Is this worth the effort just to offset the flicker of images loading inside K12 objects? Or, could this be handled inside the image object instead?

*Add translations for the K12 menu tooltips.

*Add canvas options for nomenu, background color, draw border, and ontop (if it works in nw.js). Test noscroll option.
  *Also add resizable (to prevent resizing of the canvas in K12 mode and other more controlled applications).

*Port vanilla garray set colors (we already have this, so check if the two are compatible), line width, visibility, display style (is this something other than the type of graph?), and disable mouse editing (disabling mouse editing is URGENT for the forbidden planet module).
  *Make sure that if an array is not editable, that it passes along its mouse interaction to objects below.

*Consider implementing verbose option from vanilla.

*Test nwjs 0.67.1 for regressions:
  *Patch window positioning: loading saved one (offset issues), and scripted ones (e.g. spectrogram inside pitch relationships patch).
  *Opening and closing window via a script does not reopen the window in the same place nor with the same size. Same is true for saving a patch and reopening it. Affects Linux running nw.js 0.28.1. Need to test with the latest nw.js.
    *Investigate index.js' nw_create_window, and the pdgui.js' canvas_check_geometry.
    *Also use index.js console positioning aspect, if necessary.
    *UPDATE: scripted repetitive vis/unvis window in pitch_relationships patch makes the window open further down (but not always) and makes the window bigger.
    *Clean-up all the other offsets found throughout the code (e.g. window_offset, which does not appear to affect the setbounds call).

*Port:
  *cyclone
    *mousestate (should be an abstaction?)
    *mousefilter (should be an abstaction?)
    *active
    *comment
    *prob
  *iemgui (all but room_sim_2d and room_sim_3d)
  *tof
    *breakpoints
    *breakpoints~
    *folderpanel
    *menubutton
    *pmenu
  *vanilla
    *openpanel?
    *new patch offset (Every "new" window is a bit shifted so it does not appear perfectly superimposed)
    *listbox gatom
    *file
    *force close pd instance to ensure there are no stray ones left? (sounds potentially counterproductive given we also have -unique flag)

*Pick the best nw.js (==> denotes the current choice)
  *Current status:
    0.28.1 next/prev option does not work.
    0.28.3 next/prev option does not work.
RPI 0.28.4 current RPi version.
    0.40.2 next/prev option does not work.
    0.41.3 next/prev option does not work.
    0.42.3 next/prev option does not work. on a dark theme in Linux menu items are not visible.
    0.42.4 register_window_id not found error. does not display anything. everything from here below has CMD+(1-9) broken on OSX when keeping the nw2 option enabled.
    0.42.5 register_window_id not found error.
    0.42.6 register_window_id not found error.
    0.43.0 register_window_id not found error.
    0.43.1 register_window_id not found error.
    0.43.2 register_window_id not found error.
    0.43.3 register_window_id not found error.
    0.43.4 register_window_id not found error.
    0.43.5 segfaults on Linux when opening dev tools.
    0.43.6 segfaults on Linux when opening dev tools.
    0.44.0
    0.44.6 everything from here works with next/prev window and Pd window options.
    0.54.0
    0.56.0
    0.58.0
    0.59.1
    0.60.0 everything form here below also has incorrectly placed windows when using nw2 option.
    0.60.1 everything above this ocassionally crashes on OSX due to lack of a fix introduced in 0.60.1
    0.62.1
    0.62.2
    0.63.1 crashes on Linux.
==> 0.67.1 
    0.68.0 window close nw1 bug (see #7981 nwjs bug report).
    0.69.1 window close nw1 bug (see #7981 nwjs bug report).
    0.70.1 window close nw1 bug (see #7981 nwjs bug report).
  *nw2 slows things down, so as long as pd-l2ork uses nw1 mode it should be fine, but this also means we are stuck on 0.67.1.

*Submit patch to js external github.

*Consider adding ability to display array name that is other than the internal name (e.g. so that we don't have to use $0, $1, _ etc. in the name).

*Consider adding tiled version of an image inside ggee/image.

*refine window heights for various dialogs, so that they always display fully on-screen. UPDATE: check if this has been fixed using latest nw.js (affects only Windows).

*port shell object to Windows?

*fix inefficiency of the profuse console output.

*Fix build system inconsistencies.
  *Make incremental on a Mac results in a broken build that does not include Gem.
  *Repair light build on OSX. Test it on other platforms.
  *UPDATE: should we disable light builds altogether now that K12 mode is baked into the core?

*Investigate if patchwin array is kept properly up-to-date. Got window error when one creates a window, toggles its k12_menu, then creates another one and closes the original one and tries again. Suspect that going through the array trips up across the previously closed window. Currently, have a stopgap check if patchwin is not null before invoking its pd_canvas.js onchange.

*think about a way to deterministically inform both front-end and the back-end that the canvas has indeed loaded. See https://stackoverflow.com/questions/4057236/how-to-add-onload-event-to-a-div-element/55106785#58838457 (Third Attempt (and Definitive Solution))

RARE:
*Occasional nlets on message (when using temporary non-edit-mode using alt key) get stuck outside edit mode.

*An error in OSX preferences when working with GUI dropdown (or something along those lines).
  *Figure out how to reproduce.

*sometimes closing a newly created window before it has posted or possibly creating two windows by quickly double clicking on a subpatch irreversibly breaks the front-end. Need the better checks'n'balances.

*occasionally when editing a new object text is not displaying until you click outside it. happened with the modulo object.

*check for stray/sporadic bug where bang and other objects stop working and bang object gets stuck in on mode until the mouse is moved (nw.js bug? UPDATE: it appears at least one of the sources was a bug in the scroll_to_gobj call that was fixed on 2021-11-01).

*Sometimes editing message resizes the object size without erasing text. Is this a nw.js bug?

*Textbox still sometimes loses all its text (get a console error resizebytes being out of memory).

*Space in path (e.g. username) makes installing apps in the user folder fail.
  *Tested and cannot reproduce. Looks like a permissions issue, perhaps?


From old TODO:
*array in s-env draws on top of cnv, which it shouldn't (requires redrawing of the entire GOP, do we really want to do this?--this should solve itself once we decide to update rather than redraw messages)

*object synonyms do not instantiate until the main object has been instantiated (no solution--advise getting rid of aliases or making one monster startup setup routine)

*Redesign main window interface?

*add ability to custom name each instance of pd-l2ork (pd~?)

*shared sends and receives among multiple instances?


MAYBE:
*gui_canvas_scroll_to_gobj should only scroll to an object if doing so improves situation (e.g. if the object is wider than the screen, then scrolling won't fix anything)?

*add ability to custom name each instance of pd-l2ork (pd~?).

*Consider adding smooth scroll to the scroll action. NO--could end up too CPU intensive and not worth it until engine and front-end are fully decoupled.


LATER:
*Make runtime tooltip editable via properties and storable like the pd patch script's "f" option that defines object width?
*Make nlets have programmable runtime tooltips? (this is not really necessary since abstraction META file takes care of this and subpatches are generally not ideal for more advanced UI operations)


PD-L2ORK DONE:
*Add focus/commit to numbox2
*Add output option whenever an arrow up/down is pressed on the numbox2 while it is activated (with or without shift)
*Add interactive flag to gatoms and all iemguis that can be interacted with (gatom, tgl, bng, number2, vslider, hslider, vradio, hradio, knob, mknob)
*Gatoms need to be interactive by default
*Fix weird coloring of the mknob
*Update help files
*gatom when edited from larger length to smaller, ends up having garbage (e.g. one that has 3 chars or numbers, activate it, and then start typing--after first char you end-up having garbage there) ONLY APPLIES TO THE 0 width gatoms (both text and number ones)
*"sorry, I could not find the source of that error" should be message if it is a message and not an error
*clicking on find box and then onto the canvas makes canvs interpret it as a selection box
*pressing return with the find bar open after you've already found an item and with the item deselected, does not reinitiate search
*search unable to find a phrase embedded inside another word (e.g. $1-local-$5-blah will not be found when searching for $5)
*Fixed netserver's extraneous benign errors: netserver: Resource temporarily unavailable (11) and netserver: could not send data to the client (including a typo)
*object width that is wider than text width due to the number of nlets when being edited does not size itself properly
*add copy option to gatoms (add the gatom value to the clipboard)
*Revamped the search box fixing bugs, regressions, and adding missing features.
  *Fixed HTML bug in pd_canvas.html
  *Added ability to properly detect wholeword vs partial word search
  *Ensured that when clicking on the find bar the click does not propagate onto the canvas, which could cause erroneous selection boxes and other issues.
  *Made sure that the existing selection box upon invoking the find bar is properly handled with a fake mouseup event.
  *Ensured that when one changes whole word option or deselects last found object, the search process restarts from the beginning.
  *Made it possible to search for A_DOLLAR inside an A_DOLLSYM (e.g. searching for $3 inside blah-$3-something would erroneously yield no results).
*More stability improvements to the maxlib/netserver.
  *Fixed extraneous benign errors due to the use of the new non-blocking mode. Made default debug output more conservative.
*fixed activated text box size and side-stepped the cord update issue, updated close dialog animation.
  *When text box is activated and the number of inlets or outlets requires that the object be wider than its text or specified width, the object now specifies appropriate width.
  *During editing because updating cords is not currently easy to do given that this logic is now spread across both nw.js and C, the edited object now has an aura (achieved through CSS) that ensures that the cords at least appear to fade out into nothing during the editing process, until the object is deactivated, at which point the C code will update cord locations.
  *Closing dialog is now animated and makes the visual experience a bit "smoother".
*add click mode 3 for the ggee/image that allows for tracking the cursor whithout preventing the passing of the click to objects below.
  *Updated core pd-l2ork engine behavior to allow for passing of pointer behavior to passthrough objects even if
   an object is grabbed.
  *Ensured proper stacking order (top to bottom).
  *Updated dialog and help files.
*Fixed a bug where opening recent image-help.pd file inside an instance of pd-l2ork spawned f
rom a command line, causes error when trying to open the image file associated with the image obje
ct because of nw.js' inability to handle relative paths provided by the pd-l2ork engine.
*Cosmetic fixes to help files
*Fixed bug where select all inside the dialogs (when selecting a text or numbers) on OSX selects canvas objects instead. Added ctrl/cmd+w for closing all dialogs that bind to the pdgui.dialog_bindings(windowname). Added ctrl/cmd+a for selecting text and numbers only on all dialogs that bind to the same call.
*Major regression: passthrough is not mapping properly inside GOP.
  * Required changes to the ggee/image and the core behavior inside g_editor.c and g_graph.c
  * Passthrough mode did not work after an object inside GOP has been grabbed.
  * x were y are off inside GOP.
  * Checked the mouseup event.
*Fixed regression on how the activated objects behave on the right edge and other object resizing logic.  
  * Added logic for providing nw.js with the activated object's number of nlets, which will help determine whether the object should automatically resize its width based on the text width (objects with more than 2 inlets or outlets will need to remain the same size, so as not to introduce dangling patchcords, since we have no way to update patchcord position until the object has been deactivated).
  * Fixed regression how the objects did not resize properly due to addition of the pixel-based width for an object to ensure the object with more than 1 in/outlet keeps its width.
  * Ensured that objects on the right edge do not get activated with more lines than they have deactivated (linked to problems above).
*Vastly improved performance using the new passthrough mode. Changed how the passthrough mode 3 communicates mouse events.
*Updated image help file and its dialog to reflect changes in image behavior.
*Updated the install README.
*Fixed a long-standing pd bug where resizing a text object whose x1 and y1 overlap with another one above it results in the wrong object being resized.
*Fixed a long-standing bug where trying to connect an object whose outlet we wish to connect from is partially covered by another object which has no outlets (e.g. comment), even though the connection cord is initially created, it does not want to connect to other objects (inlets are not highlighted and upon releasing the mouse button, the connection never happens). This is because previous logic relied on canvas_findhitbox which is not checking whether objects have nlets, so it returns topmost object, rather than the topmost one with outlets (which is the one we started connecting from).
*Fixed a bug where scroll_to_gobj (e.g. when using "find" feature) would be called before a new window is properly registered, and, as a result it would trigger a js error. Now, it waits until the window is properly registered.
*Fixed a bug where calling "find again" in a subpatch that was opened by a "find again" request, gives wrong result. Further refined the previous bug-fix.
*Reworked the find logic when searched across multiple windows and with multiple search bars open. Whenever search reaches a subpatch with an open search bar, it closes it to minimize confusion. Find again always goes back to the current search scope (toplevel patch) and search word until user clicks on a search button in any find bar (at which point that becomes the toplevel patch with its search text.
*Added highlight for gatoms when being edited directly by user (when pressing enter).
*Added highlight for numbox2 when being edited directly by user (when pressing enter).
*It appears on Ubuntu 20.04, large windows get automatically maximized. This adversely affects Tweeter appearance. The only way to fix this is to adjust Ubuntu settings by typing "gsettings set org.gnome.mutter auto-maximize false". Later, we will look into adding "maximizable" and other options from 1.x and beyond to the window management.
*Fixed a bug where mycanvas dialog says image width instead of rectangle width. Fixed co-dependence of the dialog_image and dialog_iemgui and added missing translation entries for fr and de translations.
*Fixed weird message resizing issue that causes text inside to be partially invisible and to scroll.
*Fixed a regression where sometimes copying stops working, triggering the following error: TypeError: Cannot read property 'classlist' of undefined.
*Fixed the defunct moonlib/image external. Marked it as loudly as possible as defunct.
  *selection rectangle is off.
  *clicks still register in GOP patches (likely core fix).
  *border highlights inside GOP patches.
  *error reopening a patch once it has been saved and closed (works fine on first try--likely path issue).
  *weird repositioning and visibility issues inside GOP.
  *size should automatically readjust.
*Fixed memory leaks with moonlib/image.
*Implemented batch image loading for ggee/image, so that it can handle image sequence (akin to moonlib/image).
*Updated ggee/image and moonlib/image help files accordingly.
*Overhauled tof/imagebang to work in Pd-L2Ork. Updated help file and removed questionable help file content.
*Updated moonlib/image and tof/imagebang to consistently support both relative and absolute paths of images.
*Updated moonlib/image to address the bug where opening an image after setting a preloaded one did not immediately update the image. Further refinements to the help file.
*Fixed regressions where images did not display properly (or at all) on Windows. Removed flicker on moonlib/image. Updated help files for tof/imagebang and moonlib/image.
*Removed unnecessary error message from the ggee/image.
*Improved all dialogs that have dynamic updating of fields to ignore calls while the window is still being created.
*Refined delayed scroll during find (when a subpatch needs to be opened), so that it checks when the window is ready. Improved scrolling logic for windows whose leftmost and topmost coordinate may be negative.
*Added dynamic field updating for the gatom dialog for interactive and exclusive options.
*Added to all the various core iemgui object options ability to autoupdate fields inside their dialogs (if any). Exposed numbox' drawstyle and autoupdate as a patching message. Additions to help files and cosmetic fixes.
*Fixed size redrawing bug in the moonlib/mknob and ensured that its values also autoupdate when the dialog is open.
*Minor cosmetic refinements to deprecated objects.
*Improvements to the flatgui/knob, including width for the dial, off and on segments of the dial circle, automation of the dialog fields (when open), additional translation options for the new fields, and other minor bug-fixes.
*Updated miXed/cyclone to support all the file i/o features (e.g. coll object) replacing non-functioning legacy calls. Fixed a bug in coll object where it did not report all load/save calls via its 3rd outlet.
*Improved keyboard shortcuts for the text editor widget (used by "text define" and various cyclone library objects, such as coll).
*Fixed regression in scroll_to_gobj that is triggered when doing find/findagain request and which could trigger an error due to window not having been created yet, breaking the UI.
*Vastly improved find/find again behavior that now detects also matches in object's sends and receives.
*Removed leftover debugging printout message in find_ignore and legacy warning for the color saving format for the iemgui objects.
*Deal with array manipulation and data structure drawing location issues.
  *fixed being unable to click on arrays both within GOP and toplevel, including having multiple arrays and the ability to click either of them. Note that when an array has jump-on-click (joc) enabled, it will override any clickable array since it takes entire size of the array window.
  *changed the cursor appearance when manipulating arrays.
  *toplevel window with an array should not have any scrollbars.
  *fixed a bug where array_joc did not get updated when invoked from the toplevel window array properties.
  *scalar subpatch does not update appearance when the patch window is resized.
  *scalar selection box in a subpatch (see disis_wiimote-help.pd subpatch with 4 blobs) is inacurate and larger on the left side as you move the scalar further to the right.
*When opening a GOP-enabled patch whose gop rectangle should not be drawn because subpatch has only scalars, you can still resize the parent GOP size (cursor changes to resize arrows).
*Fixed a bug where comments exceeding 1024 characters got malformed when being sent to the engine.
*Fixed helplink not being able to revert to its reformatted text after being activated. Updated pddplink to use the new method to avoid it being redrawn in a wrong z order from the other objects on canvas.
*Receive is now reconfigurable, just like the send object, when its scope is empty (or equal to &s_). updated supporting help file.
*Fixed a bug where large text boxes with line break on a hyphen spilled over the box boundaries (originally detected in the filter-remote-admin-messages in the L2Ork-Tweeter-Server).
*Added ability for the netserver object to disconnect clients based on their socket number, updated and improved both netserver and netclient help files.
*Reworked pasting of patch content (copyfromexternalbuffer) directly into the patch to ensure that optional width info (provided as , f <width>;) is reformatted as a new line #X f <width>; and previous line terminated by a ;.
*Further adjustments to the copyfromexternalbuffer to address idiosyncrasies of Windows.
*Revised and finished context help patch dealing with $0, $1, and $2 (all_about_scope_and_locality.pd).
*Array editing cursor should revert to regular cursor upon right-click (and revert afterwards).
*Fixed Gem not building properly on newer msys2 installs.
*Finished renaming the remaining instances of purr-data to minimize confusion between the two releases.
*Fixed a bug where searching for an expression also incorrectly highlighted a canvas containing such an object even if the canvas did not have the expression in its name (e.g. searching for $1-overdrive inside L2OrkTweet.pd version 0.63 incorrectly highlights subpatch containing the expression).
*Made redrawing of canvases after changing option for curved cords more robust, avoiding redundant redraws. Fixes errors printed to the console.
*Fixed a bug where the hand grabbing cursor during connecting reverted back to cursor_editmode_nothing as soon as the mouse moved after initiating the connecting action by clicking on the outlet.
*Fixed a bug where netserver was not correctly freeing disconnected clients and updating the number of clients.
*Added option for netserver to adjust the threshold for the number of failed packets sends before disconnecting the user server-side. This is typically used when a client disconnects in a way that does not give the netserver opportunity to receive disconnection notice.
*Fixed a crasher with netserver due to static use of inbinbuf which causes netserver to crash when running two instances with no creation argument. By default implicit port of 0 successfully instantiates the object. However, the object is not functional.
*Removed the threshold option on the netserver as it resulted in a faulty number of clients reported and unintentional disconnections.
*Updated the build script for sensel and pdjs externals, so that they also work on arm processors (e.g. RPi).
*Updated nw.js on all platforms to 0.28.
*Cosmetic fixes to the sensel external and its README.md.
*Updated Linux deb prerequisites.
*Fixed a bug where Windows sensel external did not work out-of-box.
*Fixed a bug where curved_cords option could not be re-applied until the preferences were reopened.
*Added missing translations for german and french for the General tab in the Preferences window.
*Updated fluid~ external to safeguard against loading files other than sf2, updated its documentation to reflect this, added default soundfont to ensure K12/midi_synth can always have a soundfont available, and updated K12/midi_synth accordingly.
*Fixed bug with array define if one clicks to view the array. This would trigger following errors:
error: array: no method for 'query-editmode'
error: array: no method for 'updatemenu'
error: array: no method for 'mouseup_fake'
error: array: no method for 'magicglass'
*Adjusted vertical position of the X axis labels on the arrays (on by default using array define), so they don't overlap with the array's border.
*Made edit menu automatically toggle options that are applicable to a particular patch. Useful for patches that are not editable (e.g. array window or the "array define" canvas).
*Explored issue with poke~ and the following error warning: extern using garray_getfloatarray() won't work in 64-bit version. UPDATE: This is not an issue but only a warning. It appears not to affect poke~ object. The poke~ documentation has been updated to include information about the bang signal that is meant to request array redraw since the object does not do so manually (as doing so would result in redraw requests on per-sample change and therefore unreasonable CPU overhead).
*Implemened snap to grid option and reworked how the editmode is visually altered when holding the ALT button.
*Updated links to Pd-L2Ork apps to point to the user folder instances, so that they are immediately modifiable, as needed.
*Minor fixes to the Audio-Chat app.
*Initial port of the autocomplete feature (next TODO commit will highlightchanges that still need to be addressed).
*Fixed regression with the merging of the autocomplete patches (canvas properties could not open due to an error).
*Improved dac~ and adc~ help symbols, so that they are properly shown in the autocoplete (was adc~_dac~).
*When closing a gop subwindow, the parent patch should be redrawn to honor ordering of the objects. This is a temporary fix until the proper GOP drawing is implemented.
*A temporary fix for the issue where objects keep redrawing/flickering when using tabwrite and repositioning the GOP array that is visible inside the same patch while in edit mode and with another GOP object being selected (notably K12 object). Up until now, the repositioning was erroneously done on the selected object, rather than the array. Now, the repositioning request uses the tag of the array object and repositions it correctly. This workaround will be removed when the proper GOP drawing is implemented.
*Added external editor to js object for Linux and OSX. Updated js object help file to reflect changes.
*Fixed array put and canvas properties dialogs to accomodate child color picker window.
*Updated js help file to provide additional clarification regarding the compile message.
*Fixed regression on OSX where reopening saved patch resulted in 22px taller patch window than what it was when saved. Bumped installer for non-RPi OSs to 67.1.
*Further refined the js-help.pd file.
*Updated libFLAC linking in the Makefile for the Windows platform due to changed library name.
*Fixed regression where UDP packets were not being sent. This is a legacy object and likely not to be developed further. Small cosmetic changes to the supporting help files.
*Fixed slight visual regression on the Raspberry Pi externals in the K12 library. On image was being drawn over all other GUI elements.
*Cosmetic fix to a documentation patch.
*Improved compiling from source instructions for Linux platform.
*Fixed array put and canvas properties dialogs to accomodate child color picker window.
*Reworking GOP drawing order to allow for partial visibility.
  *Initial commit that enables all iemgui, gatom, comment, and dropdown, as well as gop canvas objects to be drawn as children of the GOP patch they belong to.
  *Fixed ggee/image and flatgui/knob to work with the new GOP drawing approach.
  *Ported pddplink to the new GOP drawing logic. Enabled GOP visiblity of the pddplink (thus forgoing the documentation of the currently undocumented -gop flag, while maintaining backwards compatibility), and fixed two bugs associated with the pddplink drawing.
  *Fixed moonlib mknob and image objects to support new GOP drawing order.
  *Updated Scope~ to work with the new GOP drawing order.
  *Fixed inconsistency inside graph_vis. Needs to be further tested.
  *Fixed Scope~ object not highlighting properly when selected (and not highlighting inside a GOP subpatch even when the GOP is selected, as it should).
  *Updated pianoroll to work with the new GOP drawing. Updated the external dialog to better accommodate its parameters.
  *Pianoroll now gets properly highlighted when selected (only when toplevel)
  *Additional fix for pianoroll (forgot annother gui_gobj_new call)
  *Fixed the way pianoroll is drawn (removed redundant border), made its selection box wider to make it easier to spot.
  *Fixed image object showing through GOP window when the GOP patch is selected and when all inside objects should not be visible.
  *Updated grid object, correcting a number of bugs, including point being visible when the GOP is selected, and autoupdating of the point location when the grid is resized.
  *Refined selection box for the grid object.
  *Ported room_sim_2d and room_sim_3d to the new GOP drawing method. Made selection outline properly colored and more easily visible.
  *Added support for arrays (inside GOP or toplevel). Additional debugging commands (while working on other types of scalars).
  *Bugfix for GOP array drawing, accounting for issues associated with creation, and for changing of array properties. This one should be universal and much better than previous approaches.
  *Reenabled proper coloring of dirty abstractions (GOP and non-GOP).
  *Fixed a bug where patches with non-array scalars were not editable.
  *Fixed non-array scalars being displayed incorrectly both on toplevel and inside a GOP subpatch.
  *Made sure that subpatches are not marked dirty when displayed or manipulated, only the abstractions.
  *Ported scalars to work with the new GOP drawing approach. Fixed a long-standing bug with scalars not having correct selection box.
  *Removed redundant selection inside a toplevel array after applying new properties. This should not happen because the array window should not be editable.
  *Fixed a bug where array is slightly offset downwards inside a toplevel window after applying new properties.
  *Fixed regression where fake keyup was not registered anymore on canvasobj (see pd_canvas.js' target_is_canvasobj).
  *Fixed GOP subpatch/abstraction titles to be located under the objects for legacy purposes. This only affects GOP enabled patches on their parent canvases. Other text (including arrays) is always on top, which makes more sense for readabaility purposes. LATER consider making this a legacy flag option. The benefit of keeping it this way is so one can continue to use such patches without hide text which should be reserved for K12 objects, for instance, to prevent their editability and potential new user confusion with the complex object appearance and its potential breakage due to a typo/insertion/deletion. On the other hand, keeping text visible, yet covered by another object, enables its visibility when a user wants to edit things (e.g. L2Ork-Tweeter parts). Otherwise, it is invisible.
*Fixed disis_gpio external and updated build script to accommodate changes.
*Fix OSX build on Xcode 14.
*Add new accelerated version of Gem to OSX.
*Fixed OSX code signing and mic and camera permissions on Catalina and newer.
*Improved deb dependencies.
*Fixed dropdown menu offset due to new GOP drawing implementation (only affected menu belonging to a dropdown two or more levels deep).
*Fixed regression where deselect single GOP patch deselected all of them.
*Fixed highlighting of message and number2 objects using newly implemented GOP drawing approach.
*Fixed incorrect drawing of GOP objects when placed in a negative X or Y location on canvas.
*Improvements in handling OSX menu bar.
*Fixed positioning of the data structures inside a GOP (e.g. nunchuk joystick crosshair inside disis_wiimote-help.pd). Ensured that scalars properly adjust position and drawing aspect ratio based on the GOP window resizing and how they are drawn 2 levels deep inside a GOP (GOP inside a GOP).
*Fixed positioning of the dropdown for autocomplete in a patch that has top-left corner with negative coordinates. Made the autocomplete scrollable (rather than fixed to the position relative to the viewport). Both new_obj_textarea and autocomplete are placed below the scrollbars.
*Made autocomplete switch above the object if it does not fit into the window (like dropdown), but only if it can fit above. Otherwise, we leave it below.
*Fixed buggy coloring of the abstraction outline when dirty (or subdirty).
*Reenabled autopatching while typing an object name.
*Reworked dependencies for Linux to support Ubuntu 22.04.
*Updated Linux and Windows build to use latest nw.js.
*Updated the RPi build to use the closest version to that of the desktop (0.40.3 for RPi and 0.42.3 for desktop).
*Fixed regression where cut/copy/paste/select all did not work inside edited text boxes.
*Fixed the regression where array on a parent patch that was also a GOP subpatch did not get displayed properly. Turns out legacy repositioning code that wasn't removed was the culprit. This also vastly simplifies the garray drawing.
*Made scalars without a template a visible/selectable/movabel/deletable square, as is the case with vanilla.
*Ported and improved ggee/envgen external. This one is marked legacy and is currently not being developed further. May revisit this later by enabling visual resizing and deleting of objects.
*More envgen improvements to the envgen documentation and a bugfix in sustain/release implementation.
*Ported imagebang to the new drawing logic.
*Ported helplink to the new drawing logic.
*Added main Gem library git submodule with latest updates and updated build scripts for OSX and Windows and tested that it works on Linux, as well.
*Added option on the general preferences tab for when nw.js is downgraded to delete the nw.js user data folder.
*Updated K12 Rpi GPIO abstractions to avoid unnecessary console output and potential errors opening GPIOs due to bad timing.
*Merged latest autcomplete improvements in Purr-Data with additional bug-fixes.
*Fixed OSX having inconsistent positioning of the new patches (file->new) likely due to a bug in nw.js 0.28.3. See comment in the code on how to handle this later with future nw.js upgrades and the introduction of the saving of the Pd-L2Ork console position and size.
*Implement gopspill option for the canvases.
*Fix the major slowdown with nw.js versions newer than 0.42.3.
*Update K12 objects to use gopspill option, so that the icons are not truncated.
*Update autocomplete box appearance and wording inside the preferences (more space above, remove "experimental" wording).
*Enabled rebuilding of the index on every startup if build_index option is set in the preferences. LATER: investigate how the timestamp feature works...
*Ensured that the gopspill option does not work for arrays (via dialog or scripting).
*A number of improvements to the autocomplete:
  *Do not index (for autocomplete purposes) object name and/or args that failed to create.
  *Improved mechanism for autocompletion text removal (using ctrl+y). If a text is highlighted in the autocomplete list, then the command will try to remove that text. Otherwise it will try to remove text that is currently entered inside the edited object.
  *Fixed indexing issue when the popup is above the object, in which case removal threw out an error.
*Reimplemented next/prev patch window feature to make it work with newer nw.js. Should also work with older ones.
*Fixed regression with the graph_gopspill that caused first sub-GOP patch border to be drawn incorrectly.
*Added safety checks for graph_gopspill to prevent from scripting messing things up.
*Fixed visual appearance of a K12 object (raspberrypi_analog_in was erroneously instantiated with the "on" icon).
*Added dummy disis_gpio object to be used on non-RPi platforms because disis_gpio's reliance on wiringPi makes it prone to crashing when a platform is not recognized.
*Pd-l2ork main window now saves its position and size between restarts.
Add global "editable" flag. Figure out how to embed this into the patch that is not easily disabled.
  *Right click should also not work in non-editable patch. OK
  *Should be only toplevel patch? No. Any patch and by extension any subpatches. OK
  *"Select All" should not automatically enter the edit mode. OK
  *Check if text copy can still work. OK
  *Check if this properly navigates all subpatches and disables them, as well. OK
  *Deal with the alt key press and clicking on the message that disables editable option. OK
  *Rework canvas_disable_editmode_in_this_and_children_canvases to support both enabling and disabling and migrate GUI aspects to pdgui.js. OK
  *Disable put menu (see m.put.object etc. in the pd_canvas.js). MORE TESTING NEEDED
  *Add the code in pdgui to update (and keep track of) the edit menu items. MORE TESTING NEEDED
    *Use editable[cid] dictionary
    *edit, inspector, select all, find, find again, copy, paste, duplicate, cut, undo, redo, tidy
  *Add a warning in the menu as to why one cannot enable edit mode. OK
  *This may also partially address the following existing limitation:
    *cursor abstraction does not report right mouse up events due to it triggering the pop-up menu.
      *This is solved when the edit mode is not working OR by using the new disable-popup option (see below).
*Added disable-popup per-canvas option. Updated documentation for hcs/cursor and canvasinfo, and added additional documentation regarding scriptable events for canvases (referenced in the canvas-help.pd).
*Fixed issue where extra lines were added to a comment object (see pd_canvas.js line 1261 for additional info.
*Better fix for the inaccurate positioning of the Pd Console on Linux (necessary due to upstream nw.js bug). Affects Linux only.
*Cleaner (best?) approach to dealing with the Linux titlebar offset that does not require creation of a dummy window.
*Added ability to message both nwjs and pd using the "send message" option from the file menu. By prepending the message with "nwjs:", it will be sent to the nwjs side of things instead of the Pd. Also, the message now autodetects the presence of ";" at the end of it and adds it, as needed.
*Scripted resizing of patch windows keeps recreating the window and, when done fast, can result in stale windows. See 1497602807047-pd-msg/pd-msg/1.msg_and_patch/6.relocate_windows.pd. UPDATE: this is a buggy help patch that has multiple instances of the my_subpatch. Hence, it shows three windows instead of one. In addition, consistency_check is warranted because sending window height of 0 will trigger consistency check since it is an invalid window height.
*Fixed a GOP group drawing regression where an object after applying properties to an array makes array's inside contents (scalars) move with the selected object.
*Cleaned up array save contents. Enabled significantly faster saving of large amounts of audio data on Windows that may be embedded inside arrays. 3-minute file saving went from near indefinite (e.g. over an hour) to 5 seconds.
  *This is fixed, but now loading those same patches fails due to same resize limitations.
  *Capped the size on Windows up to 1,000,000 points per array. Otherwise, because Windows is currently 32-bit, upon trying to load, pd-l2ork runs out of memory.
    *Pd-L2Ork now provides a warning to a Windows user and bails.
  *Besides, saving these with the patch is woefully inefficient. One ~3-minute file balloons the patch size from a couple of KB to 150MB (!). Hence, users should be discouraged from embedding large files.
*Updated editable notifications, so that they don't redundantly spam notification for every subpatch with an array.
*Fixed a number of regressions that have resulted from the introduction of the editable option.
  *Duplicating array opens subpatch (it shouldn't). This is due to the old editable flag triggering mandatory opening of the patch that has disabled editable option. Now, it is reported only in the console.
  *After this, the original patch is treated as if it is array-only, thus making further edits impossible. This was due to erroneous seeking of the root parent patch inside canvas_set_editable function.
  *Selected array when moved dislocates array contents incorrectly. This was another side-effect of the aforesaid bug.
*Fixed a bug where toplevel array canvas and other patches that are not editable did not have the option to close window enabled.
*Array size text box inside array dialog should be wider.
*Added more verbose out of memory message.
*Fixed a segfault bug present in the new binbuf_addarray function.
*Added better way of handling saving contents of large arrays, including preventing their saving on Windows because there we are still stuck in 32-bit land, which can cause all kinds of problems. See the commit for more info.
*Upped the maximum array size on Windows to 2880000 (or 60 seconds worth of audio at 48KHz). Even at this size, each such array will take up 27MB, so clearly dynamic loading from HD should be used instead.
*Fixed implicit function compile error on non-Windows OSs.
*EXPERIMENTAL: enable enqueuing instead of outright drawing. doing so fixes major slowdown when trying to alter an array data by clicking and dragging (drawing using mouse), which results in a large queue of redundant redraws. TODO: check for regressions.
*Investigated a bug that occurred when loading a large array, array data is not stretched to the full default width of an array.
  *Appears to be dependent on the location of the GOP window, so this is clearly a bug.
    *It is affected with too large of an array. When keeping the size limited (as we do now by limiting embedding only up to 2880000 points), this has not manifested yet.
  *LATER: Consider drawing half as many points than it currently draws.
*Resizing GOP having one (or more) arrays that cumulatively have more than 200k points, should not redraw the GOP until the resize action is finished. So, instead we go with blanking the GOP contents if the GOP has more than 200k points cumulatively (e.g. 2 garrays inside a single canvas with 120k points each would result in blanking the canvas during resize, just like one garray with 200,001 point would). Arrays with less points (cumulatively) continue to be redrawn using enqueued operation.
*Resize triggers saving operation, which results in the verbose warning for large arrays. Therefore, disabled the warning, particularly now since it is not necessary anymore given that there is a hard limit on the array size.
*Redrawing array on nwjs side, while possible, is currently rather convoluted and not that useful. Doing so requires rethinking how the array is stored and then reattaching the contents and doing recalculation of the bbox, which can get really messy. Hence, the aforesaid implementation.
*Large arrays are very inefficient when redrawn due to array change using mouse click and drag. Chose to queue scalar redraws. This fixes the major slowdown with arrays. However, need to investigate for potential regressions.
  *Sprite game works OK.
*An array of improvements to the search browser, including ability to show folder contents and, by clicking on displayed folders, to show subfolders. Added a button that reinitializes the search index.
*When closing the patch, made sure that the dialog is always centered. This is a regression due to nw.js upgrade.
*Refined data dialog width to make it look better on Windows.
*Fixed windows not opening patches requested by a second instance of pd-l2ork that is not unique or does not have a nogui flag. The same also works now for double-clicking on any file while pd-l2ork is already running.
*Added ability to drag and drop .pd files onto the Pd-L2Ork console.
*Fixed the issue where some arrays were still not correctly stretched when drawn. It was the margin of error that crept in when utilizing the existing glist_xtopixel call, which includes the x offset and thus lowers the decimal accuracy of a float value. Thus, depending on the array location, the problem would manifest more or less. To test, move an array, cut it, and then undo.
*Fixed segfault when resizing red rect (due to mouse up event that should be triggered only if there is resized object).
*Fixed regression where arrays were not properly shown due to inverted y norm value.
*Added debugging messages for easier debugging.
*Fixed a series of bugs where resizing red rect in an GOP-enabled abstraction does not trigger dirty (either when done on parent or the patch itself), or does so incorrectly (e.g. on the parent canvas instead of the abstraction itself). Checked also the subpatch dirty mechanism, as well as repositioning the red rect inside the GOP-enabled subpatch or an abstraction.
*Implemented auto-updating of canvas menu at creation time, based on the editable flag.
*Fixed a bug where auto-updating did not work on OSX. TODO: check if this may cause any unwanted regressions, as well as whether we need timeout at the bottom of pd_canvas.js in update_menu_items function.
*Fixed regression with gop spill drawing on objects like K12/logic_sequencer that have GOP within GOP and where generic .gopborder query would fail identifying wrong border to be manipulated.
*Fixed offset in the array window that results in the whole array changing location downwards after a first click. On OSX and Windows, one has to move the window first to trigger setbounds call via pd_canvas.js.
*Fixed regression of queueing garray_redraws, which caused redraws to stop under certain circumstances (either too fast, e.g. 10ms, or too slow, e.g. 500ms).
*Fixed a regression where garray_doredraw explicitly re-selected scalars (elements of the array), when this is not needed anymore, since they are now a part of the group (new GOP drawing approach).
*Fixed a bug where comments had redundant borders drawn every time the user (re)entered the edit mode, which caused problems with advanced theme editing.
*As a redundant safety precaution, now that I understand the syntax, reverted the port value to +port which ensures that this is always a numerical value.
*Added 60-hz theme and added ability to customize SVG and editmode background color (large and small tiles separately) and default array colors via CSS variables. Enabled assigning of custom text color to objects, and broken objects. All of these are used by the new 60-hz theme. Also included default SVG colors inside default.css.
*Changed default OK keyboard shortcuts in dialogs to ctrl/cmd+enter/return, as leaving it as only enter, can crash nwjs if the user's focus was on a dropdown (a.k.a. select) object, which triggers request to render a dropdown at the same time that the window is being closed.
*Implemented deterministic redrawing of the array despite using the queuegui mechanism which vastly lowers the CPU footprint of drawing arrays.
*Refinements to the disconnect command on netserver.
*Fixed bug where dropdown popup was off to the left when the screen has been scrolled to the right.
*Merge K12 menu patch and clean-up (WIP)
  *Check if patch opens ok when creating new menu with K12 mode enabled. OK
    *There is no K12 menu option in the main pd console window.
  *Fix the hide button. OK
  *Process -k12 flag correctly. OK
  *Horizontal break is too thick. OK
  *Improve width. OK
  *Hide help menu in K12 mode. OK
  *Background behind top button should be the same level of transparency as the bottom part. OK
  *Fix the scrollbar position. OK
  *Improve group button colors. OK
  *Refine menu and scrollbar spacing. Extend height to the bottom. OK
  *Right-click help is not working. OK
  *Menu is too translucent. OK
  *Put K12 menu option should be at the bottom. OK
  *Adjust K12 menu on zoom. OK
  *Extraneous triggering of update_k12_menu? OK
  *File K12 mode should be a separate item (with a break before and after). OK
  *Finish migrating K12 calls from pd_canvas.js to pdgui.js. OK
    *Need to figure out how to run menu update located in pd_canvas.js from pdgui.js... OK
  *Copy CSS stuff to other themes (:root and K12). OK
    *Make a common css that is loaded before theme which then supersedes things. Should have both of the aforesaid elements. OK
  *Should clear console be available in K12 mode? YES, but only on the main window. OK
  *Disabling K-12 mode does not revert the popup to the original one. OK
  *Dragging hscroll over K12 menu gets the hscroll grab stuck. OK
  *New window in K12 mode should be bigger since menu takes a lot of space. OK
  *Scrollbar is off now that the edit button has been removed. OK (slight margin below due to miscalculation of the svg element--a long-standing problem that currently has no explanation).
  *Toggle position is off now that the edit button has been removed. OK
  *Fix regression in file open and find (w.document should've been just document--perhaps a typo that is a result of some earlier change?) OK
  *Submenus are not transitioning/animating their height. NOT SURE IF THIS IS EVEN POSSIBLE, it is also not necessary. may revisit later.
  *K12 menu does not want to unfold when not in k12 mode. OK
  *Menu should be hidden on help files, and only unfold on new/empty patches when the edit mode is enabled using K12 mode. Similarly, hide the menu when the edit mode is off in K12 mode. OK
    *Solution, remove edit button from the k12 menu and make the tab triangle the locking icon and unfolding of the menu synonymous with the edit mode. OK
    *If K12 put menu option is enabled, it should be per-canvas option with the default being unfolded (once activated)? NO it should be exclusively driven by the editmode on/off state. OK
  *Make vscroll and hscroll grab event keep the cursor the same and afterwards revert to the appropriate cursor. OK (was problem even before the K12 menu, apparently)
  *Zoom should work even when invoked over the menu. OK
  *Keyboard shortcuts should work on top of the menu, as well. OK
*Fixed issue where relocating border (rect) of a GOP object when vis-ed due to gop_spill option, if the same object has other embedded GOP-enabled objects also with gop_spill option (e.g. K12/wii_buttons.pd and K12/logic_sequencer.pd), this would result in an error due to previous implementation selecting child GOP border, rather than that of its own.
*Merge K12 menu patch and clean-up (WIP)
  *Implement K12 demos menu option. OK
  *Make end of the hscroll/vscroll drag reflect new mouse cursor. OK
  *Separate scrolling of the k12 menu from the patch. OK
*Simplifying of the toggle_edit, gui_canvas_set_editmode, and canvas_set_editmode across pdgui.js and pd_canvas.js
*Implemented saveas on creating new K12 patch.
*Make canvas' left side wider once the K12 menu is unfolded.
*Fix the logic between show k12 menu and K12 mode.
  k12_mode_menu_status and k12_menu_status should be 0 or 1
  k12_menu should be for all patches
    no need for cid for canvas_params anymore
  entrypoints:
    set the k12_mode
    click on k12_menu_vis (ONLY IF NOT IN k12_mode)
    new window created
    toggling edit mode
  file->k12_mode
    set_k12_mode
      set the k12_mode variable
      1:
        do this on all open canvases
          update menu to reflect k12_mode
          set checkmark for the file->k12_mode
          make k12_menu visible
          editmode ? k12_menu is unfolded or not
          update_scrollbars (so that the offset is enabled or disabled depending on whether menu is unfolded or not)
      0:
        do this on all open canvases
          update all menus to reflect regular mode
          set checkmark for the file->k12_mode
          check what is the state of the k12 menu, and if:
            1:
              make sure the k12_menu is visible and if not, make it visible with -155px left offset
              editmode ? k12_menu is unfolded or not
            0:
              hide k12_menu
              make k12_menu left property -155px
          update_scrollbars (so that the offset is enabled or disabled depending on whether menu is unfolded or not)
    click on the k12_menu_vis option (ONLY IF NOT IN K12 MODE, since otherwise this option is not visible)
      toggle_k12_menu
      set the variable
      1:
        do this on all open canvases
          set checkmark for the put->k12_menu
          make k12_menu visible with left offset -155px
          editmode ? k12_menu is unfolded or not
          update_scrollbars (so that the offset is enabled or disabled depending on whether menu is unfolded or not)
      0:
        do this on all open canvases
          set checkmark for the put->k12_menu
          hide k12_menu (no need to check for K12_mode since we already know we are not in it since this option is visible)
          make k12_menu left property -155px
          update_scrollbars (so that the offset is enabled or disabled depending on whether menu is unfolded or not)
  new window created
    during menu creation, check for k12_mode (DONE, I think), BUT do not vis/unvis or set checkboxes yet
    update_menu_items (onload, after register_window_id)
    if (k12_mode || k12_menu)
      set checkmark on the file->k12_mode || put->k12_menu
      make k12_menu visible with -155px left offset
      editmode ? k12_menu is unfolded or not
      update_scrollbars (so that the offset is enabled or disabled depending on whether menu is unfolded or not)
  toggling edit mode
    send pd edit message from pd_canvas.js before we get to common stuff inside pdgui.js
    editmode ?
      1:
        if k12_mode or k12_menu_vis
          unfold the k12_menu
      0:
        if k12_mode or k_12_menu_vis
          fold the k12_menu
  *Move K12 menu to the View tab? NO, since all view options are per-canvas.
*Implement updating of the main Pd-L2Ork window menu based on K12 mode. OK
  *Instead of renaming the K12 item, just have a checkbox next to it OK
  *Make sure the K12 Demos and K12 mode elements work. OK
  *Automate addition and removal of the K12 Demos and toggling of the K12 mode and make sure that the newly created elements work. NO (see below)
    *Consider keeping K12 demos in there at all times? NEED TO since there is no graceful way I found (yet) to insert and remove items from the main app menu without breaking things...
*Update installer to include lock icon and K12 menu images in the bin folder.
  *K12-icons has lock-editmode.png, lock-runtime.png, and l2ork_addons/K12/icons-large/*
  *Given the K12 mode uses 3rd-party externals, having this now disables light builds, which is ok, since that was never our focus anyhow...
*Updated all help files in the pd/doc/5.reference/ folder to also work with the new 60-hz theme. Namely, changed font and number location for mycanvas objects that denote each inlet in the help file.
*More refinements to the help files to conform with 60-hz GUI preset.  
*Added 60-hz preset as one of the built-in ones.
*Made 60-hz preset default.
*OSX and Windows installer fixes for the new K12 mode.
*Fixed Windows path is not working for K12_demos.
*Reverted K12 icons to the old non-notched version, added K12 motor and solenoid objects and supporting images.
*Added new servo and solenoid objects to the K12 menu. Refined images and updated motor and servo abstractions.
*Refined the 60-hz theme
*Updated disis_gpio to support interfacing with servos and solenoids.
*Pressing Alt key in K12 mode does not update background.
*Fixed bug where zoom reset does not update the K12 menu size.
*Ensured that once the K12_menu offset is established, that it stays consistent (observe how it jumped after the first object is created, since at that point bbox' leftmost point has also changed to the objects' leftmost point). Note how now canvas_params has a redundant nw_win and cid arguments. I am keeping this way because this prevents two redundant calls for gui(cid).get_nw_window since some of the other calls also need nw_win. LATER: rethink this, and perhaps only pass cid instead.
*Updated K12 icons.
*Added loudspeaker output to the K12 menu.
*Added preset and comment K12 objects in a new tab.
*Fixed issue where creating an object and having k12 menun pop up (or already open with mouse being above the k12 menu), then typing, added text to the object (from the engine's perspective) but did not update the visible text inside the box.
*Made OSX menu updates consistent with the K12 mode, including the K12 Menu option.
*Added dummy disis_gpio and disis_spi objects to OSX and prepared the build of the same for Windows.
*Refined building of dummy disis_gpio and disis_spi on Windows.
*Fixed benign occasional bug where snap to grid would (due to its delayed nature) sometimes trigger canvas_get_snap_offset consistency check error due to selection being let go before the delayed action took place.
*Forgot to add updates tar_em_up.sh script for dummy gpio and spi externals for Windows and OSX.
*Bunch of additional refinements of the build process due to inclusion of the dummy gpio and spi externals.
*Added way to update default theme on Windows.
*Ensured that Windows installer installs settings system-wide, that pd-l2ork upon quitting (re)saves settings, that Windows installer now provides a custom new default theme (60-hz), that Windows uninstall does not obliterate user settings, and that Windows installer does not ask redundant questions about uninstalling older version.
*When resizing object past its minimum width, as allowed by the number of inlets or outlets (whichever is greater) and in-between spaces, its text should not get any narrower.
*Refine K12 object sizes to make images fit better.
*Fixed bug where selection box, when moving mouse over K12 menu, gets stuck and returning to the canvas keeps the selection stuck until user clicks. Similarly, now objects can be dragged below the menu, and after letting go, the canvas updates its location to make the leftmost objects visible.
*Saving dirty subpatch (abstraction) leaves parent patch still showing dirty (leaves subdirty class name on it). See wii_buttons.pd and multibuttons.pd for an example. This was due to a regression where canvas_dirtyclimb was also called from graph_vis, resulting in erroneous higher subdirties value.
*Made sure that the border coloring of GOP-enabled canvases on their parent canvases remains acurate after they are (re)opened into their own window. This includes a small dirtyclimb regression fix (checking that the canvas is not already dirty before assigning it a subdirty state).
*A quick fix to the existing themes to make them usable (by including default.css to cover anything the themes are currently not covering). LATER: refine details in areas that remain inconsistent (e.g. vanilla theme GOP selection is still orange, instead of blue).
*Fixed bug in patch_name where it did not observe the optional argument, thus being unable to pull info from parent patches.
*Refinements to the K12 objects to make them work on all platforms.
*Fixed K12 phaser abstraction to not rely on the rjlib and improved help file by adding another preset.
*Further refined the issue of creating objects dragging them with the K12 menu in the mix and starting with the mouse being over the K12 menu (now we disable the Put menu when hovering over the K12 menu).
*Cosmetic improvements to the K12 objects.
*Added missing functions to the dummy gpio object to prevent unnecessary error messages in the console.
*Fixed issue that manifests when getting the close prompt without saving the patch and after having the canvas zoomed, the scrollbars and the K12 menu do not update after zoom reset and before the close dialog appears.
*Fixed issue where fluid~ on Windows would not instantiate due to 2 'silent' dependencies by the libfluidsynth-3.dll, libgomp-1.dll and libpcre2-8-0.dll. Go figure... Added the same to the fluid~ build process (even though they have no effect there, they will trigger an error in the future if those libraries change name, so we can use this as a reminder to update Windows Makefile).
*Fixed typo in the documentation.
*Updated K12/output object to support stereo and mono-to-stereo. Updated help file and supporting icons. Ensured that the object by default is in the off position.
*On Windows make pd-l2ork default to open a filetype rather than prompting every time. WILL NOT CHANGE (if user has multiple versions of pd or other text editors that could open the .pd file, it should be up to them to set the default inside the OS).
*Made arduino abstractions available on OSX and Windows.
*Updated and cleaned-up all K12 objects and abstractions.
*Fixed issue when two-finger scrolling and afterwards pressing ctrl, the screen continues to use values to zoom in or out due to scroll inertia. Affects Windows only. The fix does not have any observable regressions on other OSs. Fixed the same for the console window.
*Window should resize to the right when the K12 menu is unfolded. OK
  *The scrollbars should also update, as needed. OK
    *Sometimes scrollbars stop updating after having used K12 menu. Open ~/Desktop/title.pd and toggle k12_menu. Looks like overflow does not get reenabled. REWORKED wheel, scroll, and canvas_params logic.
*Fix disis_gpio on RPi is not working (got a dummy instead) due to a bug (regression?) in the tar_em_up.sh script.
*Updated L2Ork Tweeter to 0.71 with regression fixes.
*Refined K12 menu scroll (using native info, rather than cooked version that is sent to the backend).
*Preferences should offer an option to clear user settings (on Windows, registry) and repopulate it with defaults.
*Moved reset_nwjs_user_settings_folder() from the dialog_prefs.html and disabled its button option on the General tab since it is such an uncommon option. Instead, started building functions that can be invoked from the File->Message that involve less common situations like this one.
  *Added reset_user_settings() function that reverts all settings to default while keeping recent files.
  *The two functions can be invoked in the File->Message prompt as:
    nwjs:reset_nwjs_user_settings_folder()
    nwjs:reset_user_settings()
*Improved preferences dialog, so that the bottom three buttons are always aligned the same, regardless the focused tab.
*Disabled right-click help for the comment object in K12 mode to prevent user from navigating into the non-K12 help documentation, since comment object is the same in both modes.
*Made arduino_connect off when using -1 option. (prior to the fix, it ran green/on on RPi for some reason, even when using -1).
*Updated nwjs to use USERPROFILE instead of HOMEPATH, so that it generates correct paths in Windows (Windows needs C:/ prefix and HOMEPATH does not supply that anymore on nw.js 0.67.1). This was preventing opening of the correct path for sessions in Tweeter, for instance.
*Initial integration of the downgraded mingw packages to make Windows version compile successful.
*Fixed regression with OSX where saved patch when reopened on OSX ended-up being smaller.
*Upgraded portaudio and other array of fixes for the M1/M2 platform (still need to use Intel builds due to externals causing crashes). This is a cherry-picked port of Purr-Data commit 842 by Albert Graef.
*Added documentation for second inlet of the K12/output object inside its help file META subpatch and updated documentation for the first inlet.
*Fixed a regression due to implementation of the true GOP drawing logic that caused GOP-embedded iemgui's pos and delta messages to incorrectly reposition them.
*Aesthetic updates to select documentation patches.
*Added experimental updating of the array on each bang message inside the tabwrite~ object, to ensure it is redrawn even if only a fraction of the array is being populated.
*Fixed a bug where saved patch at (0, 0) coordinates resulted in a requested float coordinates and an error in js.
*Fixed emscripten building bug for ggee/image (may affect merging of the emscripten branch).
*Updated README.md to include additional msys packages that are appear to be necessary with the latest version of msys.
*Added missing package to the Windows MSYS compile instructions.
*Fixed a meta subpatch with inlet info that will be used for tooltips.
*Fixed pddplink and helplink bug where tidy did not properly reposition the object.
*Rework and merge tooltips megapatch. DONE
  *Make sure GOP objects get no tooltips. DONE
  *Only K12/output gets tooltips. Why? Forgot to rebuild index. DONE
      *Change default indexing settings in the settings file that ships with pd-l2ork, so that it includes all objects. DONE
  *Hide nlets of all objects when in runtime. DONE
  *Store tooltips inside the svg parent group, so that they can be disabled at runtime mode, and reenabled in edit mode without having to go search for them again. DONE
  *Add runtime tooltip field to all objects (editable via a message, and store it also inside the parent svg group, so that the editmode and runtime tooltips can be efficiently toggled between. DONE
    *Rename message to tooltip, since we are now using them only for select objects. DONE
    *What about gatom? DONE
  *Make tooltips redraw after rebuilding search index. DONE
  *Fix escaping characters ('\') in the tooltip text (e.g. ggee/image outlet). DONE
  *Refine K12/output help file to fix a missing tooltip. DONE
  *Refine ggee/image help file which had a typo for inlet 0. DONE
  *Figure out why valgrind reports illegal read of 1. UNABLE TO FIGURE THIS ONE OUT (suspect it being a va_arg issue)
  *Figure out how to update tooltips on the parent patch for dynamically created inlets and outlets inside a GOP patch. This is not necessary, since abstractions can use META to define their inlets/outlets, while subpatches are mostly there for encapsulation purposes. We can revisit this potentially later. DONE
    *Should nlet objects have their own tooltips built-in? No. DONE
  *Slowness with built-in objects like inlet and outlet (looks like the search function pulls from all the different places?). DONE
    *Rework how the tooltips are pulled from the index. DONE
    *Figure out why inlet/outlet have wrong descriptions. DONE
      *tipName first, then objname? Yes. DONE
  *Fix bugs in the tooltip search, rework iemgui and gatom tooltip approaches, so that they can share more. DONE
  *Fixed a showstopping bug where inlet and/or outlet tooltips were null, resulting in UI freezing.
*Added emscripten branch and made sure the PdWebParty builds correctly, including a collection of bug-fixes and improvements.
*Raspberry pi fix for using HDMI audio output (enabled PortAudio in Linux/RPi builds). Cosmetic fixes to the naming scheme for the different audio drivers.
  *Added full and light suffixes to the built package name.
  *Removed Purr-Data version number, keeping only the date build and vanilla compatibility version.
*Added support for the latest RPi hardware and kernel that identifies itself differently.
*Removed Purr-Data versioning from the post-install README.
*Fixed stray help files that did not have their cnv number recolored, making it effectively invisible when using the new theme.
*Fixed a bug where tooltip parsing did not work on Windows because the delimiter was ':' which is also used in Windows paths (e.g. C:\Users\somefile.pd), resulting in erroneous data.
*Reworked how the rtext info is formatted before being sent to gui_gobj_new. Due to lack of null terminating character, on Windows in particular, this would result in an error that would prevent the canvas to be properly drawn. Streamlined how all objects that call gui_gobj_new obtain this info.
*Finish integration of packages necessary for a successful compiling of the Windows version of pd-l2ork into README.md.
*Fixed a bug where selecting and displacing an array within a GOP doubly displaces its array data when tabwrite is being activated using metro (redraw option keeps adding/subtracting from the array's original position--this is likely a scalargobj getrect bug) DONE
  *Potential duplicate of another bug report: putting bar graph and then editing it displaces its data (both Windows and OSX when creating an array as part of a subpatch, possibly leaving it selected, and then manipulating it on the parent window--but not always?). DONE
  *Arrays do not draw properly if you open a subpatch with them and arrays being already redrawn due to dsp (also metro?) running until one resizes the window (see Audio Chat subpatch with arrays). DONE
    *When an opened GOP-enabled subpatch that contains a subpatch with a scalar is closed, the scalar does not redraw until its location is changed. DONE
*Fixed a bug where sending pointer data using metro while the data structure is deleted crashes pd-l2ork.
*Fixed issue where cnv object right-click->properties when patch is locked enables edit mode but opens properties of the canvas (patch itself) if the click location is inside the grabbing box, but outside the actual canvas. Doing the same in edit mode works fine. This is a prevalent legacy use in the help patches, using the grabbing box as a hollow frame for a number denoting number of inlets/outlets/arguments.
*Fixed issue where prev/next window from the main Pd window did not work on Windows and Linux.
*On Windows made sure that properties windows are never below the edge of the screen (e.g. when the properties are opened on an object at or near the bottom of the screen).
*Reworked repositioning of windows to sidestep nwjs v1 limitations that appear to remain unaddressed, first focusing on OSX, while also adjusting following cosmendtic fixes:
  *Changed Atom Properties title for SymAtom as SymAtom Properties (this is to distinguish between the two due to their size differences)
  *Fixed frame visibility around flatgui/knob in the 60-hz theme
  *Fixed square close button on OSX inside the dropdown dialog
  *Made put array menu show up in the center of the focused patch and added repositioning to its dialog (both create array and canvas properties).
  *Distinguished between Put Array and Canvas Properties dialog, so that they can get unique heights for overflow repositioning.
  *Distinguished between Canvas and Canvas&Array properties.
*Fixed array name being invisible on the outdated RPi nwjs version.
*Fixed on Windows a bug where opening a second instance of pd-l2ork without the unique flag did not get that second instance closed properly.
*Improved bar graph positioning.
*Improved visibility of the array name.
*Updated fluid~ to include gain.
*Internationalize K12 menu.
*Fixed fluid~ build on Windows (needed to include yet another silent lib to make it work, likely due to msys/mingw updates).
*Deleting game.pd's main subpatch and undoing it crashes pd-l2ork.
*Consider changing netserver.c as is the case on the server computer:
+++ b/externals/maxlib/netserver.c
@@ -326,7 +326,7 @@ static void netserver_send(t_netserver *x, t_symbol *s, int
argc, t_atom *argv)
                        //sys_sockerror("netserver");
                        if (x->x_log_pri >= LOG_ERR)
                           post("netserver: could not send data to the client");
-                       x->x_fd_error[client]++;
+                       //x->x_fd_error[client]++;
                        if (x->x_fd_error[client] >= x->x_fd_error_threshold)
                        {
                                post("netserver: disconnecting client on the socket %d due to %d failed attempts to send packets", x->x_fd[i], x->x_fd_error_threshold);
@@ -419,7 +419,7 @@ static void netserver_client_send(t_netserver *x, t_symbol *s, int argc, t_atom
                        //sys_sockerror("netserver");
                        if (x->x_log_pri >= LOG_ERR)
                           post("netserver: could not send data to the client");
-                       x->x_fd_error[client - 1]++;
+                       //x->x_fd_error[client - 1]++;
  *Update: this does not appear to be necessary. Connectivity issues without this are so far exclusively due to bad connection.
*Merge improved forbidden planet documentation patch (I03.resynthesis.pd in audio examples). DONE
  *Investigate why this patch is not using vanilla DAC abstraction, instead of its improved "extended" version. This is because there is a different abstraction included in the 3.audio.examples, than the one in 5.reference. Will leave this as-is since the sizing is also affecting the visual organization of the patch content.
*Ubuntu 22.04 build: investigate iem16 build issues and gmerlin library support. 20.04 uses 1.16 automake and 2.69 autoconf. 22.04 uses 2.71 autoconf and 1.16.5 automake. This appears to not be a problem anymore with the latest git checkout as of 2023-08-29.
*Fixed a bug where edit mode tooltips show when the patch is opened in non-edit mode. Improved CSS to ensure that tooltips show up on the entire surface of the GOP-enabled subpatch/abstraction that is displayed on a parent patch's canvas, including areas that are empty/transparent.
*Fixed occassional bug where due to out-of-sequence gui_canvas_set_editmode call would not find a valid patchwin[cid]. Updated L2Orkmote-Tweeter benign bug.
*Corrected error for the coll text box:
  Uncaught TypeError: Cannot read properties of null (reading 'window')
    at gui_canvas_set_editmode (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:2672:34)
    at eval (eval at perfect_parser (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:3608:21), <anonymous>:1:1)
    at perfect_parser (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:3608:21)
    at Socket.<anonymous> (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:3626:9)
    at Socket.emit (node:events:513:28)
    at addChunk (node:internal/streams/readable:324:12)
    at readableAddChunk (node:internal/streams/readable:297:9)
    at Readable.push (node:internal/streams/readable:234:10)
    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)
*Figured out why the remote session is one session behind.
*Figured out why remote clients do not get all the data.
   *Requires trickling of data via the server. Otherwise some lines end up being dropped. Needs to be stress-tested.
*Updated Windows icons.
*Updated OSX icons.
*Refined flatpak svg icon.
*Fixed OSX menu that allowed users to create objects from the menu even when the patch is not editable.
*Fixed pdlua object not working on Linux.
*Fixed issue with touch screens, namely on Steam Deck scrolling via touch screen was not working. We now have pinch serving also as a scroll option, while single touch is reserved for interacting with objects and/or selection (in edit mode).
*Reworked and vastly improved the touch and pinch actions in both runtime and edit modes. In edit mode pinch is the only way to move/scroll the canvas, because touch on the canvas is the beginning of a selection box. In runtime mode, both single touch and drag and pinch can move/scroll the canvas, while pinch also continues to be able to zoom. In either mode touching objects, as well as in edit mode touch to start a selection box, prevent the scrolling unless the selection box exceeds the window area (and the scroll in that direction is possible). In edit mode touched objects can be moved and resized (if applicable), while in runtime mode, their values are affected/changed. This works regardless of the menu-based zoom or the pinch-based zoom (a.k.a. scaling).
  *Further optimizations to the touch actions. Removed single touch scrolling, given the single touch's reserved action for interacting with objects.
  *More refinements to resolve lingering runtime issues. You can now being scroll by tapping with two fingers and then letting go of one to avoid zoom, while still being able to scroll. Tons of improvements for the dropdown touch logic and iemgui_label and scalehandle logic. label and scalehandle require a tap and then a tap and a drag due to current implementation's limitations. Given there are a number of other issues in terms of usability when working with advanced features in edit mode (e.g. resize), currently the touch support in edit mode is minimal. For this reason, touch mode should be regarded primarily as a runtime feature until it is revisited at a later date and its edit mode functionality expanded.
*Code clean-up and refined menu close dialog to properly capture and support esc key.
*Made Window menu shortcut for focusing on the Pd console always enabled.
*Stress-test Tweeter server session sharing. Looks ok and is affected by the too small of a receiving data buffer. Increasing size from 4096 to 32768 has made things better but not perfect, just yet (see below for more info).
*Fixed backslash escaping when messages are posted from the backend.
*Fixed "uncaught (in promise) runtimeerror: null function or function signature mismatch" error with preset_hub because its binding for pre-loadbang was mapped to a function with no arguments (void), when it was in fact sending t_preset_hub. This appears to work ok in C (even though it is wrong), but fails in a more sensitive WASM runtime. Fix is to introduce an intermediary function glob_preset_node_list_seek_hub_msg.
*Fixed flatgui/knob building inside emscripten. The build has been also tested on Linux. Still need to test OSX and Windows building. Note the changes necessary to be able to build a proper emscripten-ready external. Namely, the addition of the $(call set_em_flags) to the externals/Makefile, and repurposing of the autotune build script (since that one builds fine as an emscripten external) for the purpose of building the knob external.
*Overhauled netclient and netserver to allow for an adjustable size of the receiving buffer. This should hopefully solve the issue of lost session data in L2Ork Tweeter once and for all (it will require a new version of Tweeter that uses a larger buffer than the current 32768 bytes). Updated documentation and tooltips (meta).
*Reworked the dropdown logic to fix dropdown not disappearing, and allowing to have touch and slide across the dropdown to select the right option.
*Improvements to the Help Browser: added back button to the, resized the search, added folder icon to folders, and provided notification when a folder is opened that has no browsable files (e.g. some of the pd-l2ork data structures folders have a bunch of images that the browser does not show).
*Imposed maximum limit on the gate's number of outlets. Otherwise, huge numbers (e.g. 60000) freeze pd-l2ork.
*Fixed typos in the error output.
*Updated test tone patch to add metering info on the sound output.
*L2Ork Tweeter 0.78 release (see the CHANGELOG.txt).
*Refined preferences dialog with callbacks now properly updating and layout being more consistent.
*Cosmetic improvement of the about patch.
*Help Browser refinements for the OSX.
*Fixed a bug with numbox where toggling interactive triggered an error.
*Cosmetic improvement of the help file colors to not clash with the 60-hz theme.
*Further bug-fixes and improvements to L2Ork Tweeter.
*Ported vanilla WASAPI driver for windows since MMIO is not anymore supported well on more recent computers running Win11. This change is causing a pause when the DSP is turned off via a patch message and then requested to be resumed. Looks like a driver issue.
*Bunch of bug fixes and introduction of svg image support inside Pd-L2Ork's image object.
*Remove default preset for sync-controls Tweeter widget as it can overwrite user settings.
*PdWebParty updates.
*Disabled saving of verbose setting into the settings file.
*Fixed bug where arduino_analog_in was not passing float point values.
*Fixed regression where OSX was not able to cut/copy/paste inside a text object.
*Made sure that the invisible preset_hub native to each patch is always invisible and unselectable/uneditable.
*Fixed strange occurrence of 2 invisible preset_hub objects inside the patch. Could this have been a reason for some of the crashes?
*Refined browser search bar margins on Windows.
*Clean up array modification via mouse so that only one point is affected, as opposed to several adjacent ones. DONE
  *Figure out why on Windows the bbox for arrays gets corrupt after several patches have been opened. See test.pd where if the parent patch array does not have joc (jump-on-click) enabled, the subpatch data structure is editable. Otherwise, the the subpatch data structure has a wrong bbox and is therefore not selectable and selecting all and displacing causes weird zoom/behavior. This is all also noted in the following TODO items that are now grouped here.
    *Data structure game not allowing for the sprite to be selected after L2Ork Tweeter has been opened (most of the time).
    *Investigate weird zoom when selecting all objects in the game.pd and then pressing up creates a weird zoom.
      *All of these appear to be Windows-specific and may have something to do with Windows not explicitly terminating dynamically allocated strings, which may result in a mangled message being sent to the front-end.
        *TODO: get a printout of messages going to the front-end and check if the recent game.pd fix has any effect on this issue.
    *Looks also like it may be linked to the Windows version of the nwjs 0.67.1?
      *SOLUTION: No, this was something that just got triggered inside Windows. All this was solved by removing joc and rethinking how the cursor capture happens when you have a single array (whether inside GOP or a data structure array, like the one found in all_about_arrays help patch in a data structures subpatch), versus when you have multiple arrays in the same GOP (in which case targetable area is smaller).
  *Having a polygon array with 7 points and point array with 5 points in the same GOP truncates polygon array to 6 points and stretches point array across the entire GOP width. FIXED
  *Fix array dialog. DONE
*Made autocomplete use prefixes by default. This is considered experimental until the idea is further tested.
*Added dummy disis_wiimote for OSX and Windows to prevent errors when opening Linux-centric patches that use this Linux-only external.
*Fixed a bug where exclusive focus did not reset mod key states (ctrl, alt, shift),
resulting in unexpected stuck keys.
  *Solved a bug in Tweeter that was caused by this.
*Series of iterative improvements to the PdWebParty.
*Refinements to the OSX building process to allow for support of multi-user environments.
*Many more improvements to the WebPdL2Ork (new name).
*Made WebPdL2Ork support https.
*Fixed regression where atom and number2 copy/paste did not work. LATER: consider also adding cut option.
*Add bezier curve drawing ability to the arrays (currently displaying them as polygons).
*Opening file dialogs on Ubuntu 22.04, including various Tweeter dialogs opens recent files, or a wrong folder, suggesting something may be broken with the patch_name and dialog.
*Toggling VU meter scale (text labels with levels next to the VU meter) off and back on, results in incorrectly drawn scale.
*Improved file dialog opening and fixed segfaults on Windows.
*Integrated William Fergurson's porting of pd vanilla objects up to version 0.54, with list box being the last object yet to be ported, plus addressing any lingering bugs as they arise.
*Ported Albert Graef's implementation of coll text editor that makes it now work reliably.
*WebPdL2Ork bug fixes.
...TODO...
*Fixed foolin-around-007 special character issue.
*Integrated pd-flite (need to test Linux and Mac)
*Integrated Purr-Data extension to the intelligent patching
*Fix flite build on emscripten
*Fixed a bug where knob nlets and selection box are off.
*Fixed problems with bezier array redrawing inside and outside GOP.
*Fixed a bug where user was unable to select points in an array that has significantly more points than the width of the array.
*Added neuralnet external.
*Included MouseState and mousefilter abstractions for cyclone's backwards compatibility, updated cyclone's active external to make it work with Pd-L2Ork.
*Added Purr-Data rich text support with improvements and bug fixes.
*Fixed a bug where indexing timestamp check failed on paths that had <path>\\neural, resulting in \n being misinterpreted as a line break. This would make indexing run on every start-up. Fixed also timings of the indexing messages to ensure they are posted last in the console and clearly visible to the user.
*Cleaned-up updating of the patch background to reflect editmode, temporary runtime, and runtime modes in special situations, like holding alt in editmode (hence being in temporary runtime mode), and clicking on a subpatch object which should open the subpatch and reset the parent patch's alt key state (and hence also the background). Or, when dealing with the editable option in various cases (using keyboard shortcuts and/or temporary runtime mode).
*WebPdL2Ork updates.
*Fixed bug where clicking "Apply" in the audio settings, "error: /cxc: no such object" prints in the console. This affected only one particular machine.
*Fixed bug that broke the GUI when editing an object due to autocompletion indexing of arguments, reproducible below (similar error was before on line 867, inside the same function, line number likely being different due to different version of pdgui.js):
  *C:\Program Files (x8…rk\bin\pdgui.js:901 Uncaught TypeError: Cannot read properties of undefined (reading 'occurrences')
      at Object.index_obj_completion (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:901:65)
      at Object.create_obj (pd_canvas.js:1502:27)
      at HTMLDocument.text_mousedown (pd_canvas.js:831:27)
      *Creating "gate 2 1" inside server-commands inside the L2Ork-Tweeter-Teacher patch
*Fixed bug where sprintf would convert %s%s%s%s%s%s%s%s%s%s with each being a single number (e.g. 1) into a truncated number, rather than keeping it a string. This was apparent at the end of Tweeter track with lots of numbers (notes) being converted into scientific notation.
*Opening file dialog on Linux Ubuntu 22.04 via keyboard shortcut creates up to 4 prompts in a row. Doing the same via menu option does not.
  *This is an xdg + Ubuntu bug that will be hopefully fixed upstream. The problem is that the new dialog is not focused. WILL NOT FIX
*Moved RPi nwjs to version 0.6x, fixing error closing a new window because there is no "width" property (e.g. a subpatch has been created). Looks like this only affects RPi's old version of nw.js.
*Fixed bug where data structures in Pd-L2Ork Data Structure Demos (inside Help Browser, e.g. bulbs patch) when clicked slightly dislocate down and left, suggesting there is a partial loss of the location upon clicking (check places where location is at a whole number rather than x.5 which is used in places because that curiously makes things less blurry). This was because updating scalars inside pdgui.js did not account for whether the object was toplevel or not.
*Deal with synchronicity of displaying arrays (as seen in phase cancellation VT Waves module).
  *Looks like this has been already done and is a simple matter of making sure everyone gets the same signal timing to redraw.
    *Confirming this is indeed the case.
*Implemented Windows list in the Windows menu.
*Refined jack client name.
*Fixed a bug where opening meta subpatch inside any patch (here, specifically netserver-help.pd) and then closing it, and then reopening it again, keeps moving the patch window downwards (or in some cases upwards). Affects only Linux, which also exhibits this problem when opening the main Pd-L2Ork window (see index.js for an ugly hack fix that works around this nwjs 0.67.1 bug).
  *Does not affect Windows.
  *On RPi (using PIXEL/LXDE variant, the window keeps going upwards). This was also tested and is ok.
  *Fixed using start-up window repositioning to calculate universal offset.
*Fixed clone object by merging latest additions. May need additional testing for potential regressions.
*Fixed a bug where double-clicking on a patch in Windows once again is not opening the patch in Pd-L2Ork. Looks like new scheduler megapatch broke this. Implemented a bandaid solution until I study this more closely since Windows now throws the same instance for both instances. The old code continues to work on Linux and OSX.
*Integrate #1756 pull request from vanilla that may improve the scheduler.
  *This is super convoluted as the literal merge requires major changes to a lot of the code base. Merging this will require a more surgical approach that only merges relevant changes.
*Bring parity to the Pd 0.56.
*Find last error now successfully prints last error
*Clicking on the print or error in the console now works again
*Fixed temporary runtime mode where it remains enabled when you lose focus (when opening the subpatch in non-edit mode, regardless whether the parent is in edit mode or not, the subpatch upon opening with alt key has lines on it even though it is not in edit mode). Now the temporary runtime looks like the runtime. It is less confusing that way, anyhow.
*Fixed savepanel is not working: everything sent into its inlet triggered a "trigger" error
*Resizing/repositioning window does not save its new size unless you put a new object on the canvas (solved itself, perhaps this was a cascading bug from something else)
*Put a check into the code to hopefully address potential errors like this one:
    Uncaught TypeError: Cannot read properties of null (reading 'toLowerCase')
    at dwin.document.onkeydown (C:\Program Files (x86)\Pd-L2Ork\bin\pdgui.js:10877:56)




TWEETER TODO:
*Add disconnect-all message to the server to bump all
*Add disconnect-all-audience message to the serve to bump all non-players
*Add lockdown to prevent anyone else from joining

*Remove 65th beats from all sessions
  *Remove unnecessary removal of keys that post unnecessary errors

*Why is copyfrom issuing two identical tracker-time values?

*When adding/removing a part, reiterate toggle keyboard (under certain circumstances, it is lost)
    *Need to find a way to reproduce this
    *Justin reported not seeing William's part being on but also had other stack overflow issues at the time.

*Consider adding networked repositioning of the red cursor in the L2Orkmote-Tweeter, so that both users and audience can see what is everyone doing.

*Offer a way to deal with different keyboards (some keys are not in the same place, see the ELSE approach and new objects that deal with this)

*Copying another part in offline mode disassociates the user from any part, making them unable to do anything even with the keyboard enabled. May also affect the online mode. Temporary fix: (re)select part you wish to control.

*When trying to load a pattern that does not exist (after having successfully loaded one that does), the main level goes to zero.




TWEETER DONE:
*L2Ork Tweeter: Enabled smooth pitch changing (detuning directly to signal generators without triggering the envelope).
*0.50 requires latest Pd-L2Ork 20211012 or newer due to new features added to the core pd-l2ork
*Fixed bug where shift+delete deleted twice
*Added hover mode ability to add notes based on the mouse (as opposed to the time bar) position. Made erasing using delete and shift+delete to support the hover mode. Also made insert (shift+` or ~) to support the hover mode.
*Updated and optimized the left panel to make room for the hover mode option.
*Updated server to also support the hover mode.
*Swapped tab and alt key functions to make play button easier to access.
*Added ability to disable changes to the instrument level/overdrive when changing instruments by holding the Return/Enter key. Upon releasing the Return/Enter key, the level will revert to the one associated with the new instrument.
*Included username in saving the session.
*Created a "teacher" patch that adds ability for the instructor to alter others' settings.
*Update sessions that don't have parts 11 and 12.
*Improved server-invoked load session to also include sync. Expanded server command vocabulary accordingly, adding l2ork-load-sync-delay.
*Made insert/reset/clear non-interactive (delete is manually handled using legacy code inside net-io).
*Updated Teacher widget to allow for convenient loading of sessions and sync-all.
*Fixed the bug where the toggling the sound off (by holding the "'" key) did not stick after updating an instrument via preset or via shift+up/down does not work.
*Added ability to request your client number to enable greater flexibility in supporting widgets, such as the Teacher widget.
*Further improvements to the Teacher widget, including fixing the double output by the user monitored through the teacher widget and other out-of-sync issues, refining the session load and adding the save option, preloading delay and other values, toggling the metro off after it has been on when transitioning to a user that does not have tracker on, and visually acknowledging that you cannot control your own part through the teacher widget.
*Further improvements to the audio level toggles, so that they are not affected by the remote session loading.
*Implemented synced session saving where master client sends its literal session to others, to offset for any potential latency-induced inconsistencies.
*Added ability for the Teacher widget to (re)sync based on the last loaded session.
*Bunch of small Teacher widget bug-fixes.
*Fixed obscure bug in the tracker-time logic that prevented perfect sync from happening while online.
*Refactored the session sync all highlighting logic, so that it appropriately shows up on all clients.
*Added L2OrkTweet abstraction designed for use in DISIS (L2OrkTweetDISIS.pd found in the core folder).
*Included DISIS Dante mixer widget (DISIS-Dante-Out-Controls.pd found in the admin folder) since the DISIS Dante system does not have an easy way of adjusting levels.
*Fixed a bug pertaining to session saving and the session being polluted by superfluous tracker information.
*Made session saving deterministic.
*Added a new snare drum preset, accompanying loop, and a session.
*Expanded server commands example.
*Reworked the local time-synced copying of another client, ensuring that syncing to another client (whether requested locally or remotely) is accurate.
*Made all session loading and sync requests (invoked from the Teacher widget) server secure, requiring a server password.
*Fixed a bug that prevented proper syncing when copying another client's loop with sync (shift+doubleclick or shift+tripleclick).
*Implemented filtering of the session sync request server-side to allow messages to pass only for clients that are currently connected.
*Optimized the way Teaching widget deals with session sync requests by relying on its own iteration of the coll object and ensuring that the session is not redundantly reloaded if the user is looking to sync to the same session. This implementation allows for the user to load one session to all clients and then use sync from another session. This has proved useful when working collaboratively developing a piece and saving sections as distinct sessions. In the process of developing new ideas, it is possible that clients intentionally move away from an earlier session's sync. This way the new material can be preserved (assuming it is not sync-sensitive), while reverting to an earlier session's sync.
*Cosmetic fixes to the Dante main out controls.
*Added a couple new work-in-progress sessions and two new presets.
*Reworked local copy logic, replacing original 6 options with 8, with 4 and 8 (quadruple click and shift+quadruple click) being identical (copy everything). The new addition is syncing the tracker position and loop-length only (loop-all variables). Also, made the basic/common elements require fewer clicks. See the supplemental documentation subpatcher in the top-right corner for additional info.
*Added local main out level control, located in the right corner of the top bar.
*Added sessions for the "4th Beat" work-in-progress.
*Added l2ork-conduct server message (synonymous with l2ork-teach). This now enables conductor patches to affect every aspect of every instrument remotely and synchronously.
*Enabled session sync offset to ensure that a saved session can be (re)synced at any given point in time.
*Disabled sending data to the server from the Teacher widget when using user 0 (which is treated as disabled mode).
*Reorganized patch locations. Server-Commands-Example was renamed to Conductor-Commands and moved in the admin subfolder. "Into the Abyss" work presets, loops, and score have been moved into a newly created works subfolder. This has also freed-up the creation of new presets past the preset 110.
*Added documentation on conductor control variables and added overdrive-override that can override user level toggle (e.g. using ' or return keys).
*Initialized load preset value to 11 to avoid having to cycle by default through empty presets.
*Refactored admin commands to make them easier to edit and expand. Re-tested each of the admin messages and addressed bugs for obfuscation, loading/saving error messages, proper socket detection for the password change, filtering of messages that get printed out, and disabling of ping timeout for a user who got bumped to an audience/guest status via server command.
*Improved handling of title-less sessions and announcing of user session loading when online.
*Refactored select init calls to make them easier to locate inside the L2Ork-Tweeter.pd patch.
*Added brute force disconnection when disconnection occurs to address the issue of potential stale sockets.
*Added l2ork-inst-level-at l2ork-inst-level-all-at admin commands to the Server and Tweeter client. Expanded the L2OrkTweet to accommodate new functionality.
*Updated Conductor-Commands documentation, adding new server commands.
*Added loadbang to (re)send main out levels to every instantiated L2OrkTweet.pd abstraction to prevent no volume issue.
*Reworked the overdrive-override logic to prevent some of the buggy behavior between the keyboard shortcuts and the levels sent by the server.
*Fixed a bug where inst-level-all-at and inst-level-at server messages did not work under certain circumstances.
*Added a l2ork-inst-level-list-at message that allows for levels for each instrument individually provided as a list.
*Updated Conductor-Commands.pd patch, documenting the new command.
*Updated the conductor-shortcuts.pd patch for the "4th beat" composition.
*Added supporting files for the "4th beat" composition.
*Refactored "Into the Abyss" to match the new formatting for the purpose of future automatic retrieval.
*Bug fixes reenabling Tweeter's chat admin messages and fixing the l2ork-free-slot server command.
*Fixed server bug where l2ork-sync-* messages did not get passed to the guest users.
*Updated Tweeter 4th Beat's conductor shortcuts patch.
*Cleaned up L2OrkTweet.pd abstraction to minimize redundant maintenance of the version it is associated with.
*Updated "4th Beat" score.
*Fixed a bug where a user who connects after all the slots have been taken is immediately made into a guest but whose id is erroneously set to -1, resulting in user's inability to receive select server messages.
*Fixed a server bug dealing with the sequence of disconnecting clients, simplifying the flow.
*Updated documentation in the server patch.
*Updated 4th Beat score.
*0.66 New version of L2Ork Tweeter with the L2Orkmote interface.
*Minor refinements to the L2Orkmote-Interface (part of Tweeter).
*Bug-fixes to the L2Orkmote implementation. Added missing file.
*Fixed missing session filename entry textbox after last update.
*0.67 fixed double delete bug when networked.
*Added Harmonicity and Mod Amp auto-update when using arrows up and down to change values.
*Improved wording on the description of various multi-click sync options.
*Added 6 new instrument presets.
*0.68 fixed bugs in the L2Orkmote-Interface.pd, L2OrkTweet-L2Orkmote.pd, and L2Orkmote-Tweeter.pd:
  *Loop number updates on the main window when the user is using joystick
  *Preset number updates on the main window when the user is using joystick
  *Fixed clearing of the loop not working when the joystick is centered.
  *Added dynamic ability to cycle between loops and presets by holding LH button 2.
  *Fixed a bug where preset selection button erroneously also loaded the last loop selection.
  *Transposition now works (both octaves via buttons and the fine adjustment using joystick).
  *Made joystick-based transposition microtonal.
  *Fixed a bug where dry out did not adjust using the joystick (in the appropriate mode).
*0.69:
  *Added Transatlantic Grapevine (WIP) with supporting patches.
  *Added l2ork-custom server command for customizing various aspects of the Tweeter.
  *Enabled automation on the main output multiplier slider (found in the top-right corner).
  *Added new Transatlantic Grapevine sessions.
  *Documentation fix to the Conductor-Commands.pd.
  *Code clean-up.
*0.70:
  *Implemented editable option to prevent accidental edit mode.
  *Refinements to the Grapevine patches.
*0.71:
  *Fixed regression due to a bug fix in the disis/patch_name.pd abstraction.
*0.72:
  *Fixed a session saving bug and other refinements to Transcontinental Grapevine.
*0.73:
  *Added Loop-Preset-Widget.pd widget for easier access to more loops and presets than the keyboard allows.
  *Added widgets subpatch to main Tweeter window where most common conductor and performer widgets can be easily accessed.
  *Cleaned-up top-right corner of the main Tweeter window.
  *Overhauled ediable option. Now can toggle patch editability with Shift+Ctrl+Alt (with Alt being the last key to be pressed).
  *Introduced glob-recall-preset, glob-save-preset, glob-recall-loop, and glob-recall-preset, used by the aforesaid Loop-Preset-Widget.pd.
*0.74:
  *Version bump due to incremental changes that did not include version change, to prevent confusion with 0.73.
  *Inclusion of the Transcontinental Grapevine Score and Parts.
*0.75:
  *Fixed long-standing bug of session files not being properly saved.
  *Fixed long-standing bug with the tracker insert command that propagated differently on other clients.
*0.76:
  *Reworked session saving logic and corrected the insert bugfix to ensure error-free operation.
*0.77:
  *expanded loop length box width to allow room for decimal values.
  *TODO: update netserver and netclient default buffer size from 32768 to 131072 (128KB).
*0.78:
  *Introduced Sync-Controls supporting widget. Users can now use F1-F10 to recall those via keyboard (the keyboard control needs to be toggled). This object currently requires a server operation as offline mode can be easily synced using multiclick option. The patch is available as part of the widgets subpatch.
  *Reworked how sync is taking place across clients.
  *Bug-fixes pertaining to sync.
  *Optimized report sharing that now bypasses retriggering everything locally.
  *Made numeric options have exclusive focus.
  *Made more than 4 clicks still count as 4 clicks.
  *Reworked how inputs are disabled. Now we use interactive option available in pd-l2ork that prevents tampering with other user's parts, as doing so could potentially nudge parts out-of-sync, as well as cause a cascading array of challenges.
  *Consolidated L2OrkTweet and L2OrkTweetDISIS into one patch for easier maintenance.
  *Reworked offline mode to allow for concurrent use of multiple parts.
  *Code clean-up.
*In offline mode, enable keyboard and other input for multiple tracks. Consider using the mouse focus by utilizing invisible ggee/image to make focus switching easier.
  *This was also resolved in 0.78.
*0.79:
  *Fixed bug where Sync-Controls did not allow for decimal tempo value.
  *Fixed bug where L2OrkTweet was failing to update overdrive and instrument name.
*0.80:
  *Fixed regression where solo did not work in offline mode. Now, when user clicks on another part to enable solo, they also automatically switch to that part being their primary. For group soloing users will want to use future event automation.
  *Set the stage for future automation by introducing offline-messages receive in network-io subpatch.
  *Fixed imperfect sync issues when one user tries to sync with another using one of the mouse multiclick options that are invoked by clicking on the instrument/part number the user wishes to sync with.
  *Del is by default also moving pattern?
    No. Just when the shift is held and focus lost is when things break down.
    Consider resetting keyboard modifiers on refocus? No. This was a bug fixed on 2023-11-29 that pertained to exclusive focus of gatoms, where shift release was not received by pd because it was only passed onto the gatom with exclusive focus.
*0.81:
  *Fixed a long-standing bug where session saving missed some of the data (upped the number of data points from 1884 to waiting for the 1st part's reverb type output, which appears to be the safest way to identify the end of the stream). TODO: why is the output size varied under certain circumstances (so far we've seen 1884, 1918, and 1922).
  *Separated audio files from patches for Transcontinental Grapevine and 8-bit Petal to save space.
  *Updated Transcontinental Grapevine work, including fixing folder names and file organization.
  *Added Territorio Prismatico and 8-bit Petal works.
  *Added missing L2Orkmote abstraction.
  *Fixed L2Orkmote bugs and refined control mapping.
    *Made middle dead (default) space of the left hand joystick area a commit command when activating different presets and loops. Letting go of the buttons 2 and 3 that control modification of presets and loops now does nothing.
    *Clearing of the loop (backspace) is now possible by the left hand jolt without any buttons pressed.
    *Switched the order on the left hand buttons in mode 1 to prioritize loop and preset changing (1 stays the same, 3 and 4 become 2 and 3, while 4 now serves as a continual change of presets and loops without requiring for the joystick to be re-centered on every commit).
    *Ensured that user is able to change both loop and instrument at the same time (holding 2 and 3 together).
    *Instead of holding 2 on the left hand in mode 1 to adjust the overdrive level, the new configuration now uses hand pitch in combination with joystick off-center dislocation without any buttons pressed.
    *Fixed a bug where transposing down (button 2 on the right hand) also erroneously repositioned the timebar location.
    *Documentation updates.
0.82:
*Updated L2Orkmote functionality to:
  *Include tempo changes (see the documentation of the L2Orkmote-Interface.pd).
  *Moved dry level adjustment to mode 6 (to allow room for tempo changes).
  *Fixed bug where overdrive level from the previous release did not get updated correctly to reflect new control approach.
0.83:
*A major overhaul of the synchronization engine, bunch of bug fixes and optimizations, and smaller additions/improvements, including re-syncing of the works folder. Software updates include:
  *reset all, session-sync, sync-controls, and click-to-sync controls now all ensure perfect sync across all the clients
  *Introduced optimization for populating notes (text) on the track
  *Reworked all net-io abstractions to simplify the patch and utilize interactive option
  *Fixed tracker and time offset abstraction
  *Fixed bug where after session loading auto-sync does not work
  *Updated copyright message
  *Implemented better session report that copies from one client, rather than polling all clients
  *Fixed hiccup when a new client connects and ensured that everyone remains in sync due to disconnect or reconnect
  *Optimized server-side session state pull by only pulling from the oldest connected client
  *Refined tracker positioning and accuracy of placing new notes in hover mode
0.84:
  *Fixed a bug where saving a session to online clients via the teacher interface misreported a number of lines saved
  *Fixed a bug where loading sessions does not erase old notes from the track (the problem were text files edited in notepad that automatically replace non-standard characters with spaces)
  *Implemented a workaround where every time a loop is loaded or before it is written, we erase a potential extra note (beat 64). LATER: consider exploring why this happened in the first place (potentially a leftover during the optimization of the tracker logic).
  *Implemented the newfound interactive option for the dropdown object.
0.85:
  *Updated array size syntax based on the updated expr object.
  *Added Interstellar piece with its parts and score.
0.86:
  *Increased number of players to 14 and changed zoom level to make everything fit.
  *Fixed server bug where joining with part 15 (audience) doesn't get the data from other parts, but joining using any other part does (assuming you connect to a part that is already taken which then automatically bumps you to the audience).
  *Improved handshake logic to ensure that WebPdL2Ork version works even when dealing with long delays in opening HTML sockets (contributed by William Furgerson).
  *Improved logic of saving and distributing sessions through the Teacher widget.




*TODO:
  *Sometimes reconnecting keeps the playback going? Looks like this may be a side-effect of quick disconnect and reconnect. Needs to be further tested.
    *Also affects Teacher widget
  *Explore the slowness of the Teacher widget, particularly in respect to the array changes. This is particularly visible on the WebPdL2Ork, likely due to context sharing. More importantly, this is an issue on hte desktop, where it should be addressed first before exploring any additional issues associated with the WebPdL2Ork.
  *Update L2Orkmote version of Tweeter with changes made to Tweeter (involves L2Orkmote-Tweeter.pd and core/L2OrkTweet-L2Orkmote.pd).
    *Attempt to make L2Orkmote part modular?

DETAILS:

Fixed all net-io

Fixed other *-io

L2OrkTweet
  Fixed tracker and time offset abstraction
  Updated interactive to include upcoming array support
  Fixed bug where after session loading auto-sync does not work
  Fixed tracker-time to have input from $0-tracker-s
  Optimized track redrawing (pd tracker)
  Copyright message

L2Ork-Tweeter
  network-io
    session-management
      delayed-network-sync
      pd notification
    session-report    
  Copyright message
  Version

Server
  report
    find oldest
    optimized and synchronized session state pull

local-report-request OK
  preset_node_array_custom OK
  net-io-sym OK

"error: gate: no method for 'session-title'" still showing up even though it is routed properly? (network-io -> session-report) OK

Notes are not updating upon load OK

Oldest connected cannot sync to others OK
  Upon syncing with someone else, that part does not have new data broadcast, so the new sync request does not go through. Instead, that user needs to at least once manually adjust their position before they can be synced to.
    Syncing to needs to update location information
    ACTUALLY: whomever synchronizes, for some reason it does not copy the PLAY part (it still shows zero)

Sometimes when reconnecting certain parts are out of sync OK

Some are playing after reconnecting even though they are not OK
  Sometimes play is not selected even though the part is playing

Sync controls--syncing to mid-loop (e.g. 32) to another part, does not synchronize perfectly like it should OK

Session saves two tracker-time values OK

Sync on saved sessions is not anymore as good as it used to be (grapevine-end trumpet part timing seems a bit off) OK

Reset does not resync starting metro point OK

Made reset (single-user) and sync-all (a.k.a. reset all) more robust by restarting everyone's metro OK

Made session sync more robust by sending all client data in a single message OK

Made reset and session sync gui visually react only to clients that are connected (offline mode does not need this since its reset all equivalent is done by toggling all parts and pressing `). For offline session sync one will have to do some scripting and pulling key aspects from the Teacher widget. OK

Scratching the tracker does not dislocate like it should OK

Refine tracker position in respect to the text and dots OK

Fix bug where loaded loop did not erase itself immediately upon playback if looping was not enabled OK



Overdrive is not correct when copying another part (because of the logarithmic value) OK

Reconnecting client has everyone else slightly out of sync (but everyone who has been already connected is fine) OK

TODO:

*Sometimes reconnecting keeps the playback going? Looks like this may be a side-effect of quick disconnect and reconnect. NEED TO RECREATE
  *Affects Teacher widget

Make dropdown have interactive option to conform to other core GUI objects FIXED

*Loading sessions does not erase old text from the track FIXED
*Saving sessions to all first time shows 0 for some FIXED
*Erase 64th note inside coll when loading and saving loops FIXED (WORKAROUND LATER: revisit this, since currently we are getting redundant deletes)

*update net-io-coll and get rid of t b 0 on the 1st outlet of the gate since it does not do anything

Update L2Orkmote version of Tweeter with changes made to Tweeter

*Remove 64th beat from sessions (don't need to worry about reordering each line and can even leave empty lines in the middle--tested on 2024-10-16)

For automation see:
https://askubuntu.com/questions/354993/how-to-remove-lines-from-the-text-file-containing-specific-words-through-termina

  SESSIONS:
    4th-beat-droplets-6-session-coll.txt
    4th-beat-final-10-session-coll.txt
    canada-end-session-coll.txt
    canada-mid-session-coll.txt
    canada-start-24-3-session-coll.txt
    canada-start-session-coll.txt
    coffin-dance-session-coll.txt
    foolin-around-007-session-coll.txt
    gamelan-session-coll.txt
    grapevine-end-session-coll.txt
    grapevine-mid-session-coll.txt
    grapevine-start-24-3-session-coll.txt
    grapevine-start-session-coll.txt
    insterstellar-end-session-coll.txt
    insterstellar-end-stasis-session-coll.txt
    interstellar-mid-session-coll.txt
    interstellar-start-session-coll.txt
    raye-end-session-coll.txt
    raye-mid-session-coll.txt
    raye-start-24-2-session-coll.txt
    raye-start-session-coll.txt
  WORKS:
    2022.transcontinental.grapevine/Loops_and_Presets/10_Joaquin_Montecino/2023-04/Sessions/l2ork-grapevine-take-2-6.1-session-col2-session-coll.txt
    2022.transcontinental.grapevine/Loops_and_Presets/10_Joaquin_Montecino/2023-04/Sessions/l2ork-grapevine-take-2-6.2-session-coll.txt
    2022.transcontinental.grapevine/Loops_and_Presets/10_Joaquin_Montecino/2023-04/Sessions/l2ork-grapevine-take-3-session-coll.txt
    2022.transcontinental.grapevine/Loops_and_Presets/10_Joaquin_Montecino/2023-04/Sessions/l2ork-grapevine-take-arg-session-coll.txt
    2022.transcontinental.grapevine/Loops_and_Presets/12_Ico_Bukvic/2022-12/Sessions/l2ork-grapevine-take-4-session-coll.txt
    2022.transcontinental.grapevine/Loops_and_Presets/12_Ico_Bukvic/2022-12/Sessions/l2ork-grapevine-take-5-session-coll.txt
    2022.transcontinental.grapevine/Sessions/grapevine-end-session-coll.txt
    2022.transcontinental.grapevine/Sessions/grapevine-mid-session-coll.txt
    2022.transcontinental.grapevine/Sessions/grapevine-start-24-3-session-coll.txt
    2022.transcontinental.grapevine/Sessions/grapevine-start-session-coll.txt
    2023.8-bit.petal/Sessions/raye-end-session-coll.txt
    2023.8-bit.petal/Sessions/raye-mid-session-coll.txt
    2023.8-bit.petal/Sessions/raye-start-24-2-session-coll.txt
    2023.8-bit.petal/Sessions/raye-start-24-5-session-coll.txt
    2023.8-bit.petal/Sessions/raye-start-24-6-session-coll.txt
    2023.8-bit.petal/Sessions/raye-start-session-coll.txt
    2023.territorio.prismatico/Sessions/canada-end-session-coll.txt
    2023.territorio.prismatico/Sessions/canada-mid-session-coll.txt
    2023.territorio.prismatico/Sessions/canada-start-session-coll.txt




HELP FILES TODO:




HELP FILES DONE:




K12:




NOTES:
*order of the execution for the new canvas creation:
gui_canvas_new has_toplevel_scalars=0
nw_create_patch_window_menus
pd_canvas.js init x55e86dd973c0 0


*order of execution for the pd start
s_main.c:   sys_main
            sys_argparse (sets sys_openlist or files to be open)
            sys_fakefromgui (if nogui flag is used)
                glob_initfromgui... (fast-forward below ---)
s_inter.c:  sys_startgui (if starting with gui)
                -->HERE WE CAN PASS FILES TO THE FRONT-END
                set_datadir (deals with sys_unique, and if it is not unique does not pass a port number, which makes nw.js not spawn a new instance)
from GUI:   "init" message calls glob_initfromgui... (fast-forward below ---)
---------------------------------
s_main.c:   glob_initfromgui CLEARS sys_openlist (and tries to open files)
                openit
s_path.c:           open_via_path

Use for starting master instance:
killall pd-l2ork || true && make && sudo cp ../bin/pd-l2ork /usr/bin/ && sudo cp ../nw/*js /usr/lib/pd-l2ork/bin/ && pd-l2ork ~/Desktop/b.pd &

Use for starting second instance:
pd-l2ork -stderr ~/Desktop/c.pd


TOOLTIPS:
    var ttt = index.search("print", {fields: {title: {}}});
    var yyy = index.documentStore.getDoc(ttt[0].ref);
    post("search result: title=" + yyy.title + " description=" + yyy.description);


Tracking place to increase bbox due to K12 menu:
g_editor.c mouseup MA_MOVE calls scrollbar_synchronous_update
g_all_guis.c scrollbar_synchronous_update calls gui_canvas_get_immediate_scroll
pdgui.js gui_canvas_get_immediate_scroll calls do_getscroll (check_geom = 0)
         do_getscroll calls canvas_params (which calculates bbox)

pd_canvas.js in nw_create_patch_window_menus toggles visibility of the K12 menu if the mode is toggled from the file menu




M1/M2 cross-compiling for Intel platform (from AG's post):
A quick note to anyone who wants to do their own Intel builds from this branch: This is done most easily if you still have an Intel Mac, but if all you have is an M1/M2 Mac, you can still cross-compile for x86_64 using Xcode and a parallel x86_64 installation of Homebrew, as explained in this blog post: https://medium.com/mkdir-awesome/how-to-install-x86-64-homebrew-packages-on-apple-m1-macbook-54ba295230f.
I have tried this method myself, and it works. In addition to what's written in the blog post, I recommend setting up a dedicated shell profile, so that the Homebrew environment is set for x86_64 compilation. Something like this should do the trick:

# Set PATH, MANPATH, etc., for Homebrew.
eval "$(/usr/local/homebrew/bin/brew shellenv)"

# readline is keg-only, make sure that its pkgconfig is found
export PKG_CONFIG_PATH="/usr/local/homebrew/Cellar/readline/8.2.1/lib/pkgconfig"

alias axbrew='arch -x86_64 /usr/local/homebrew/bin/brew'
alias ax='arch -x86_64'

You can then use axbrew to install the required packages as described in the blog post, and ax make to compile Purr Data itself. Be warned, however, that brew will have to compile many packages you install from source, since ready-made binary packages for x86_64 aren't always available for the latest arm64 versions of macOS.




GIT CONFIG AFTER CLONING:
git remote set-url origin git@github.com:<Username>/<Project>.git

Submodules: git submodule update --remote

Add submodule: git submodule add -- /url/of/sub1-folder/repo sub1-folder




FLATPAK STUFF:
pkg-config --variable pc_path pkg-config
pkg-config --exists --print-errors gtk+-2.0

git clone --branch=new-pr git@github.com:pd-l2ork/net.pdl2ork.PdL2Ork.git
cd net.pdl2ork.PdL2Ork
git checkout -b net.pdl2ork.PdL2Ork
cp -r <path-to-pd-l2ork-git-folder>/packags/linux_flatpak/* .
rm -rf shared-modules/
git add *
git submodule add https://github.com/flathub/shared-modules.git
git commit -am "Initial commit"
git remote set-url origin git@github.com:pd-l2ork/net.pdl2ork.PdL2Ork.git
git show-refs
git push -u origin net.pdl2ork.PdL2Ork
<this will create a prompt for a pull request>
[reqs]: https://docs.flathub.org/docs/for-app-authors/requirements
[maint]: https://docs.flathub.org/docs/for-app-authors/maintanance
[submission]: https://docs.flathub.org/docs/for-app-authors/submission

desktop-file-validate --no-hints net.pdl2ork.PdL2Ork.desktop

Now that it is on flathub:
Create fork of https://github.com/flathub/io.github.pd_l2ork.Pd_L2Ork with the same name on own repo
git clone https://github.com/pd-l2ork/io.github.pd_l2ork.Pd_L2Ork.git
git remote set-url origin git@github.com:pd-l2ork/io.github.pd_l2ork.Pd_L2Ork
git push
Create pull request via GUI by comparing across forks

git tag <tagname>
git tag -d <tagname>

Add tag to remote repo:
git push --tags

Delete tag to remote repo:
git push origin --delete <tagname>

------------------

Updating Flatpak:

1) update metainfo.xml in packages/linux_flatpak
2) push new commit and tag it with a desired git version (see tagging above)
3) in the io.github.pd_l2ork.Pd_L2Ork repo sync it with the one on github (git pull)
4) in the same repo update yml file to reference new tag and SHA of the latest commit (one made in step 2)
5) git commit and push new change
6) on the flathub repo create a pull request by comparing two branches (flatpak one and the pd-l2ork one)
7) let the tests run and then merge the pull request. flathub page should autoupdate within 24 hours

------------------

Adding submodule to the project:

git submodule add -- https://github.com/alexdrymonitis/neuralnet.git externals/neuralnet

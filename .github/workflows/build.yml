name: Build Release

on:
  workflow_dispatch:
    inputs:
      docker:
        type: boolean
        description: Build docker image
      desktop:
        type: boolean
        description: Build desktop release

jobs:
  version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Version
        id: version
        run: echo "version=$(date +%Y%m%d)-rev.$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  docker_publish:
    runs-on: ubuntu-24.04
    needs: version
    if: ${{ github.event.inputs.docker == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: build and push
        uses: macbre/push-to-ghcr@master
        with:
          image_name: ${{ github.repository }}
          image_tag: ${{ needs.version.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: ./webpdl2ork.Dockerfile
      - name: tag latest
        run: |
          export REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker pull ghcr.io/$REPO_NAME:${{ needs.version.outputs.version }}
          docker tag ghcr.io/$REPO_NAME:${{ needs.version.outputs.version }} ghcr.io/$REPO_NAME:latest
          docker push ghcr.io/$REPO_NAME:latest

  build-ubuntu-24-04:
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.desktop == 'true' }}
    steps:
      - name: deps
        run: sudo apt-get update && sudo apt-get install git unzip bison flex autoconf automake libasound2-dev libjack-jackd2-dev libtool libbluetooth-dev libgl1-mesa-dev libglu1-mesa-dev libglew-dev libmagick++-dev libftgl-dev libgmerlin-dev libgmerlin-avdec-dev libavifile-0.7-dev libmpeg3-dev libquicktime-dev libv4l-dev libraw1394-dev libdc1394-dev rsync libfftw3-dev libvorbis-dev ladspa-sdk dssi-dev tap-plugins invada-studio-plugins-ladspa blepvco swh-plugins mcp-plugins cmt blop omins rev-plugins dssi-utils vco-plugins wah-plugins fil-plugins mda-lv2 libmp3lame-dev libspeex-dev libgsl0-dev portaudio19-dev liblua5.3-dev python3-dev libsmpeg0 libjpeg-dev flite1-dev libgsm1-dev libgtk2.0-dev git libstk-dev wget libfluidsynth-dev fluid-soundfont-gm byacc cmake ninja-build patchelf libtirpc-dev libnss3 libudev-dev
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: make
        run: make
      - name: rename
        run: mv Pd-L2Ork-*.deb Pd-L2Ork-24.04.deb
      - uses: actions/upload-artifact@v4
        with:
          name: deb-24.04
          path: Pd-L2Ork-24.04.deb
          if-no-files-found: error

  build-ubuntu-22-04:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.desktop == 'true' }}
    steps:
      - name: deps
        run: sudo apt-get update && sudo apt-get install git unzip bison flex autoconf automake libasound2-dev libjack-jackd2-dev libtool libbluetooth-dev libgl1-mesa-dev libglu1-mesa-dev libglew-dev libmagick++-dev libftgl-dev libgmerlin-dev libgmerlin-avdec-dev libavifile-0.7-dev libmpeg3-dev libquicktime-dev libv4l-dev libraw1394-dev libdc1394-dev rsync libfftw3-dev libvorbis-dev ladspa-sdk dssi-dev tap-plugins invada-studio-plugins-ladspa blepvco swh-plugins mcp-plugins cmt blop omins rev-plugins dssi-utils vco-plugins wah-plugins fil-plugins mda-lv2 libmp3lame-dev libspeex-dev libgsl0-dev portaudio19-dev liblua5.3-dev python3-dev libsmpeg0 libjpeg-dev flite1-dev libgsm1-dev libgtk2.0-dev git libstk-dev wget libfluidsynth-dev fluid-soundfont-gm byacc cmake ninja-build patchelf libtirpc-dev libnss3 libudev-dev
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: make
        run: make
      - name: rename
        run: mv Pd-L2Ork-*.deb Pd-L2Ork-22.04.deb
      - uses: actions/upload-artifact@v4
        with:
          name: deb-22.04
          path: Pd-L2Ork-22.04.deb
          if-no-files-found: error

  build-macos-arm:
    runs-on: macos-latest
    if: ${{ github.event.inputs.desktop == 'true' }}
    steps:
      - name: deps
        run: brew install autoconf automake libtool fftw lua fluidsynth faac lame libvorbis speex gsl libquicktime sdl2 ftgl jpeg sdl glfw && brew install --formula cmake
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: make
        run: cd l2ork_addons && ./tar_em_up.sh -Tkn
      - uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: "Pd-L2Ork-arm"
          src_dir: "packages/darwin_app/build/Pd-L2Ork.app"
      - uses: actions/upload-artifact@v4
        with:
          name: dmg-arm
          path: Pd-L2Ork-arm.dmg
          if-no-files-found: error

  build-macos-x86:
    runs-on: macos-13
    if: ${{ github.event.inputs.desktop == 'true' }}
    steps:
      - name: deps
        run: brew install autoconf automake libtool fftw lua fluidsynth faac lame libvorbis speex gsl libquicktime sdl2 ftgl jpeg sdl glfw && brew install --formula cmake
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: make
        run: cd l2ork_addons && ./tar_em_up.sh -Tkn
      - uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: "Pd-L2Ork-x86"
          src_dir: "packages/darwin_app/build/Pd-L2Ork.app"
        id: dmgTry1
        continue-on-error: true
      - uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: "Pd-L2Ork-x86"
          src_dir: "packages/darwin_app/build/Pd-L2Ork.app"
        id: dmgTry2
        if: steps.dmgTry1.outcome == 'failure'
        continue-on-error: true
      - uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: "Pd-L2Ork-x86"
          src_dir: "packages/darwin_app/build/Pd-L2Ork.app"
        id: dmgTry3
        if: steps.dmgTry2.outcome == 'failure'
        continue-on-error: true
      - uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: "Pd-L2Ork-x86"
          src_dir: "packages/darwin_app/build/Pd-L2Ork.app"
        id: dmgTry4
        if: steps.dmgTry3.outcome == 'failure'
      - uses: actions/upload-artifact@v4
        with:
          name: dmg-x86
          path: Pd-L2Ork-x86.dmg
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    if: ${{ github.event.inputs.desktop == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc autoconf automake git libtool make mingw-w64-x86_64-dlfcn mingw-w64-x86_64-fluidsynth mingw-w64-x86_64-SDL2 mingw-w64-x86_64-gcc-libs mingw-w64-x86_64-fribidi mingw-w64-x86_64-ladspa-sdk mingw-w64-x86_64-lame mingw-w64-x86_64-libsndfile mingw-w64-x86_64-libvorbis mingw-w64-x86_64-lua mingw-w64-x86_64-toolchain mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-speex rsync unzip wget mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-glfw mingw-w64-x86_64-pcre mingw-w64-x86_64-ntldd-git
      - name: make
        run: cd l2ork_addons && CFLAGS_GITHUB_RUNNER=-std=gnu17 inst_dir="/usr" ./tar_em_up.sh -Tk
      - name: rename
        run: mv Pd-L2Ork-*.exe Pd-L2Ork.exe
      - uses: actions/upload-artifact@v4
        with:
          name: exe
          path: Pd-L2Ork.exe
          if-no-files-found: error

  create-release:
    needs:
      [
        build-ubuntu-24-04,
        build-ubuntu-22-04,
        build-windows,
        build-macos-arm,
        build-macos-x86,
        version,
      ]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.desktop == 'true' }}
    steps:
      - name: Download Ubuntu 24.04 Release
        uses: actions/download-artifact@v4
        with:
          name: deb-24.04
      - name: Download Ubuntu 22.04 Release
        uses: actions/download-artifact@v4
        with:
          name: deb-22.04
      - name: Download Windows Release
        uses: actions/download-artifact@v4
        with:
          name: exe
      - name: Download MacOS arm Release
        uses: actions/download-artifact@v4
        with:
          name: dmg-arm
      - name: Download MacOS x86 Release
        uses: actions/download-artifact@v4
        with:
          name: dmg-x86
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.version }}
          release_name: Release ${{ needs.version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Ubuntu 24.04 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Pd-L2Ork-24.04.deb
          asset_name: Pd-L2Ork-24.04-${{ needs.version.outputs.version }}.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload Ubuntu 22.04 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Pd-L2Ork-22.04.deb
          asset_name: Pd-L2Ork-22.04-${{ needs.version.outputs.version }}.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload Windows Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Pd-L2Ork.exe
          asset_name: Pd-L2Ork-${{ needs.version.outputs.version }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload MacOS arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Pd-L2Ork-arm.dmg
          asset_name: Pd-L2Ork-AppleSilicon-${{ needs.version.outputs.version }}.dmg
          asset_content_type: application/x-apple-diskimage
      - name: Upload MacOS x86
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Pd-L2Ork-x86.dmg
          asset_name: Pd-L2Ork-Intel-${{ needs.version.outputs.version }}.dmg
          asset_content_type: application/x-apple-diskimage
